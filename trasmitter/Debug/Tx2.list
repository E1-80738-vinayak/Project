
Tx2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004d0c  08004d0c  00014d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d6c  08004d6c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d74  08004d74  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d78  08004d78  00014d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          00000278  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002d4  200002d4  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000a4f0  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001baa  00000000  00000000  0002a5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000980  00000000  00000000  0002c170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000742  00000000  00000000  0002caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021ded  00000000  00000000  0002d232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b965  00000000  00000000  0004f01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d17a4  00000000  00000000  0005a984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002d34  00000000  00000000  0012c128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0012ee5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004cf4 	.word	0x08004cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08004cf4 	.word	0x08004cf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ac0:	f000 b970 	b.w	8000da4 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9e08      	ldr	r6, [sp, #32]
 8000ae2:	460d      	mov	r5, r1
 8000ae4:	4604      	mov	r4, r0
 8000ae6:	460f      	mov	r7, r1
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d14a      	bne.n	8000b82 <__udivmoddi4+0xa6>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4694      	mov	ip, r2
 8000af0:	d965      	bls.n	8000bbe <__udivmoddi4+0xe2>
 8000af2:	fab2 f382 	clz	r3, r2
 8000af6:	b143      	cbz	r3, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000afc:	f1c3 0220 	rsb	r2, r3, #32
 8000b00:	409f      	lsls	r7, r3
 8000b02:	fa20 f202 	lsr.w	r2, r0, r2
 8000b06:	4317      	orrs	r7, r2
 8000b08:	409c      	lsls	r4, r3
 8000b0a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b0e:	fa1f f58c 	uxth.w	r5, ip
 8000b12:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b16:	0c22      	lsrs	r2, r4, #16
 8000b18:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b1c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b20:	fb01 f005 	mul.w	r0, r1, r5
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d90a      	bls.n	8000b3e <__udivmoddi4+0x62>
 8000b28:	eb1c 0202 	adds.w	r2, ip, r2
 8000b2c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b30:	f080 811c 	bcs.w	8000d6c <__udivmoddi4+0x290>
 8000b34:	4290      	cmp	r0, r2
 8000b36:	f240 8119 	bls.w	8000d6c <__udivmoddi4+0x290>
 8000b3a:	3902      	subs	r1, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a12      	subs	r2, r2, r0
 8000b40:	b2a4      	uxth	r4, r4
 8000b42:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b46:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b4a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b4e:	fb00 f505 	mul.w	r5, r0, r5
 8000b52:	42a5      	cmp	r5, r4
 8000b54:	d90a      	bls.n	8000b6c <__udivmoddi4+0x90>
 8000b56:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000b5e:	f080 8107 	bcs.w	8000d70 <__udivmoddi4+0x294>
 8000b62:	42a5      	cmp	r5, r4
 8000b64:	f240 8104 	bls.w	8000d70 <__udivmoddi4+0x294>
 8000b68:	4464      	add	r4, ip
 8000b6a:	3802      	subs	r0, #2
 8000b6c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b70:	1b64      	subs	r4, r4, r5
 8000b72:	2100      	movs	r1, #0
 8000b74:	b11e      	cbz	r6, 8000b7e <__udivmoddi4+0xa2>
 8000b76:	40dc      	lsrs	r4, r3
 8000b78:	2300      	movs	r3, #0
 8000b7a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	428b      	cmp	r3, r1
 8000b84:	d908      	bls.n	8000b98 <__udivmoddi4+0xbc>
 8000b86:	2e00      	cmp	r6, #0
 8000b88:	f000 80ed 	beq.w	8000d66 <__udivmoddi4+0x28a>
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b92:	4608      	mov	r0, r1
 8000b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b98:	fab3 f183 	clz	r1, r3
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	d149      	bne.n	8000c34 <__udivmoddi4+0x158>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	d302      	bcc.n	8000baa <__udivmoddi4+0xce>
 8000ba4:	4282      	cmp	r2, r0
 8000ba6:	f200 80f8 	bhi.w	8000d9a <__udivmoddi4+0x2be>
 8000baa:	1a84      	subs	r4, r0, r2
 8000bac:	eb65 0203 	sbc.w	r2, r5, r3
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	4617      	mov	r7, r2
 8000bb4:	2e00      	cmp	r6, #0
 8000bb6:	d0e2      	beq.n	8000b7e <__udivmoddi4+0xa2>
 8000bb8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bbc:	e7df      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xe6>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f382 	clz	r3, r2
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f040 8090 	bne.w	8000cec <__udivmoddi4+0x210>
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bd2:	fa1f fe8c 	uxth.w	lr, ip
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000bdc:	fb07 2015 	mls	r0, r7, r5, r2
 8000be0:	0c22      	lsrs	r2, r4, #16
 8000be2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000be6:	fb0e f005 	mul.w	r0, lr, r5
 8000bea:	4290      	cmp	r0, r2
 8000bec:	d908      	bls.n	8000c00 <__udivmoddi4+0x124>
 8000bee:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000bf6:	d202      	bcs.n	8000bfe <__udivmoddi4+0x122>
 8000bf8:	4290      	cmp	r0, r2
 8000bfa:	f200 80cb 	bhi.w	8000d94 <__udivmoddi4+0x2b8>
 8000bfe:	4645      	mov	r5, r8
 8000c00:	1a12      	subs	r2, r2, r0
 8000c02:	b2a4      	uxth	r4, r4
 8000c04:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c08:	fb07 2210 	mls	r2, r7, r0, r2
 8000c0c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c10:	fb0e fe00 	mul.w	lr, lr, r0
 8000c14:	45a6      	cmp	lr, r4
 8000c16:	d908      	bls.n	8000c2a <__udivmoddi4+0x14e>
 8000c18:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c20:	d202      	bcs.n	8000c28 <__udivmoddi4+0x14c>
 8000c22:	45a6      	cmp	lr, r4
 8000c24:	f200 80bb 	bhi.w	8000d9e <__udivmoddi4+0x2c2>
 8000c28:	4610      	mov	r0, r2
 8000c2a:	eba4 040e 	sub.w	r4, r4, lr
 8000c2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c32:	e79f      	b.n	8000b74 <__udivmoddi4+0x98>
 8000c34:	f1c1 0720 	rsb	r7, r1, #32
 8000c38:	408b      	lsls	r3, r1
 8000c3a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c3e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c42:	fa05 f401 	lsl.w	r4, r5, r1
 8000c46:	fa20 f307 	lsr.w	r3, r0, r7
 8000c4a:	40fd      	lsrs	r5, r7
 8000c4c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c50:	4323      	orrs	r3, r4
 8000c52:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c56:	fa1f fe8c 	uxth.w	lr, ip
 8000c5a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c5e:	0c1c      	lsrs	r4, r3, #16
 8000c60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c64:	fb08 f50e 	mul.w	r5, r8, lr
 8000c68:	42a5      	cmp	r5, r4
 8000c6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c6e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c72:	d90b      	bls.n	8000c8c <__udivmoddi4+0x1b0>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c7c:	f080 8088 	bcs.w	8000d90 <__udivmoddi4+0x2b4>
 8000c80:	42a5      	cmp	r5, r4
 8000c82:	f240 8085 	bls.w	8000d90 <__udivmoddi4+0x2b4>
 8000c86:	f1a8 0802 	sub.w	r8, r8, #2
 8000c8a:	4464      	add	r4, ip
 8000c8c:	1b64      	subs	r4, r4, r5
 8000c8e:	b29d      	uxth	r5, r3
 8000c90:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c94:	fb09 4413 	mls	r4, r9, r3, r4
 8000c98:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c9c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x1da>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cac:	d26c      	bcs.n	8000d88 <__udivmoddi4+0x2ac>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	d96a      	bls.n	8000d88 <__udivmoddi4+0x2ac>
 8000cb2:	3b02      	subs	r3, #2
 8000cb4:	4464      	add	r4, ip
 8000cb6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cba:	fba3 9502 	umull	r9, r5, r3, r2
 8000cbe:	eba4 040e 	sub.w	r4, r4, lr
 8000cc2:	42ac      	cmp	r4, r5
 8000cc4:	46c8      	mov	r8, r9
 8000cc6:	46ae      	mov	lr, r5
 8000cc8:	d356      	bcc.n	8000d78 <__udivmoddi4+0x29c>
 8000cca:	d053      	beq.n	8000d74 <__udivmoddi4+0x298>
 8000ccc:	b156      	cbz	r6, 8000ce4 <__udivmoddi4+0x208>
 8000cce:	ebb0 0208 	subs.w	r2, r0, r8
 8000cd2:	eb64 040e 	sbc.w	r4, r4, lr
 8000cd6:	fa04 f707 	lsl.w	r7, r4, r7
 8000cda:	40ca      	lsrs	r2, r1
 8000cdc:	40cc      	lsrs	r4, r1
 8000cde:	4317      	orrs	r7, r2
 8000ce0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cec:	f1c3 0120 	rsb	r1, r3, #32
 8000cf0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf4:	fa20 f201 	lsr.w	r2, r0, r1
 8000cf8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cfc:	409d      	lsls	r5, r3
 8000cfe:	432a      	orrs	r2, r5
 8000d00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d04:	fa1f fe8c 	uxth.w	lr, ip
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d10:	0c11      	lsrs	r1, r2, #16
 8000d12:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d16:	fb00 f50e 	mul.w	r5, r0, lr
 8000d1a:	428d      	cmp	r5, r1
 8000d1c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x258>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d2a:	d22f      	bcs.n	8000d8c <__udivmoddi4+0x2b0>
 8000d2c:	428d      	cmp	r5, r1
 8000d2e:	d92d      	bls.n	8000d8c <__udivmoddi4+0x2b0>
 8000d30:	3802      	subs	r0, #2
 8000d32:	4461      	add	r1, ip
 8000d34:	1b49      	subs	r1, r1, r5
 8000d36:	b292      	uxth	r2, r2
 8000d38:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d3c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d40:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d44:	fb05 f10e 	mul.w	r1, r5, lr
 8000d48:	4291      	cmp	r1, r2
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x282>
 8000d4c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d50:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d54:	d216      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000d56:	4291      	cmp	r1, r2
 8000d58:	d914      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000d5a:	3d02      	subs	r5, #2
 8000d5c:	4462      	add	r2, ip
 8000d5e:	1a52      	subs	r2, r2, r1
 8000d60:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d64:	e738      	b.n	8000bd8 <__udivmoddi4+0xfc>
 8000d66:	4631      	mov	r1, r6
 8000d68:	4630      	mov	r0, r6
 8000d6a:	e708      	b.n	8000b7e <__udivmoddi4+0xa2>
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e6e6      	b.n	8000b3e <__udivmoddi4+0x62>
 8000d70:	4610      	mov	r0, r2
 8000d72:	e6fb      	b.n	8000b6c <__udivmoddi4+0x90>
 8000d74:	4548      	cmp	r0, r9
 8000d76:	d2a9      	bcs.n	8000ccc <__udivmoddi4+0x1f0>
 8000d78:	ebb9 0802 	subs.w	r8, r9, r2
 8000d7c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d80:	3b01      	subs	r3, #1
 8000d82:	e7a3      	b.n	8000ccc <__udivmoddi4+0x1f0>
 8000d84:	4645      	mov	r5, r8
 8000d86:	e7ea      	b.n	8000d5e <__udivmoddi4+0x282>
 8000d88:	462b      	mov	r3, r5
 8000d8a:	e794      	b.n	8000cb6 <__udivmoddi4+0x1da>
 8000d8c:	4640      	mov	r0, r8
 8000d8e:	e7d1      	b.n	8000d34 <__udivmoddi4+0x258>
 8000d90:	46d0      	mov	r8, sl
 8000d92:	e77b      	b.n	8000c8c <__udivmoddi4+0x1b0>
 8000d94:	3d02      	subs	r5, #2
 8000d96:	4462      	add	r2, ip
 8000d98:	e732      	b.n	8000c00 <__udivmoddi4+0x124>
 8000d9a:	4608      	mov	r0, r1
 8000d9c:	e70a      	b.n	8000bb4 <__udivmoddi4+0xd8>
 8000d9e:	4464      	add	r4, ip
 8000da0:	3802      	subs	r0, #2
 8000da2:	e742      	b.n	8000c2a <__udivmoddi4+0x14e>

08000da4 <__aeabi_idiv0>:
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop

08000da8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af02      	add	r7, sp, #8
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f023 030f 	bic.w	r3, r3, #15
 8000db8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	f043 030c 	orr.w	r3, r3, #12
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	f043 0308 	orr.w	r3, r3, #8
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000dd4:	7bbb      	ldrb	r3, [r7, #14]
 8000dd6:	f043 030c 	orr.w	r3, r3, #12
 8000dda:	b2db      	uxtb	r3, r3
 8000ddc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000dde:	7bbb      	ldrb	r3, [r7, #14]
 8000de0:	f043 0308 	orr.w	r3, r3, #8
 8000de4:	b2db      	uxtb	r3, r3
 8000de6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000de8:	f107 0208 	add.w	r2, r7, #8
 8000dec:	2364      	movs	r3, #100	; 0x64
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2304      	movs	r3, #4
 8000df2:	214e      	movs	r1, #78	; 0x4e
 8000df4:	4803      	ldr	r0, [pc, #12]	; (8000e04 <lcd_send_cmd+0x5c>)
 8000df6:	f002 fb4d 	bl	8003494 <HAL_I2C_Master_Transmit>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	200000e8 	.word	0x200000e8

08000e08 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af02      	add	r7, sp, #8
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f023 030f 	bic.w	r3, r3, #15
 8000e18:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	011b      	lsls	r3, r3, #4
 8000e1e:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	f043 030d 	orr.w	r3, r3, #13
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	f043 0309 	orr.w	r3, r3, #9
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e34:	7bbb      	ldrb	r3, [r7, #14]
 8000e36:	f043 030d 	orr.w	r3, r3, #13
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	f043 0309 	orr.w	r3, r3, #9
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e48:	f107 0208 	add.w	r2, r7, #8
 8000e4c:	2364      	movs	r3, #100	; 0x64
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	2304      	movs	r3, #4
 8000e52:	214e      	movs	r1, #78	; 0x4e
 8000e54:	4803      	ldr	r0, [pc, #12]	; (8000e64 <lcd_send_data+0x5c>)
 8000e56:	f002 fb1d 	bl	8003494 <HAL_I2C_Master_Transmit>
}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200000e8 	.word	0x200000e8

08000e68 <lcd_clear>:

void lcd_clear (void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	f7ff ff9a 	bl	8000da8 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	607b      	str	r3, [r7, #4]
 8000e78:	e005      	b.n	8000e86 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000e7a:	2020      	movs	r0, #32
 8000e7c:	f7ff ffc4 	bl	8000e08 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3301      	adds	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b45      	cmp	r3, #69	; 0x45
 8000e8a:	ddf6      	ble.n	8000e7a <lcd_clear+0x12>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	6078      	str	r0, [r7, #4]
 8000e9e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <lcd_put_cur+0x18>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <lcd_put_cur+0x22>
 8000eac:	e009      	b.n	8000ec2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	603b      	str	r3, [r7, #0]
            break;
 8000eb6:	e004      	b.n	8000ec2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ebe:	603b      	str	r3, [r7, #0]
            break;
 8000ec0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff6e 	bl	8000da8 <lcd_send_cmd>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <lcd_init>:


void lcd_init (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ed8:	2032      	movs	r0, #50	; 0x32
 8000eda:	f000 fd43 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ede:	2030      	movs	r0, #48	; 0x30
 8000ee0:	f7ff ff62 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f000 fd3d 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000eea:	2030      	movs	r0, #48	; 0x30
 8000eec:	f7ff ff5c 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 fd37 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ef6:	2030      	movs	r0, #48	; 0x30
 8000ef8:	f7ff ff56 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(10);
 8000efc:	200a      	movs	r0, #10
 8000efe:	f000 fd31 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f02:	2020      	movs	r0, #32
 8000f04:	f7ff ff50 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(10);
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f000 fd2b 	bl	8001964 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f7ff ff4a 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 fd25 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f7ff ff44 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 fd1f 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ff3e 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 fd19 	bl	8001964 <HAL_Delay>
	HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 fd16 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f7ff ff35 	bl	8000da8 <lcd_send_cmd>
	HAL_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 fd10 	bl	8001964 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f44:	200c      	movs	r0, #12
 8000f46:	f7ff ff2f 	bl	8000da8 <lcd_send_cmd>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f56:	e006      	b.n	8000f66 <lcd_send_string+0x18>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff51 	bl	8000e08 <lcd_send_data>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f4      	bne.n	8000f58 <lcd_send_string+0xa>
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_GPIO_EXTI_Callback>:
float voltage;
// temp_str store the integer to string
// temperature convertion
char temp_str[20];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	80fb      	strh	r3, [r7, #6]
	Switch_Flag = 1;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <HAL_GPIO_EXTI_Callback+0x24>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8e:	4804      	ldr	r0, [pc, #16]	; (8000fa0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000f90:	f002 f90a 	bl	80031a8 <HAL_GPIO_WritePin>
//	HAL_Delay(1000);
//	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
//	Switch_Flag = 0;
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000013c 	.word	0x2000013c
 8000fa0:	40020c00 	.word	0x40020c00
 8000fa4:	00000000 	.word	0x00000000

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fac:	f000 fc68 	bl	8001880 <HAL_Init>

  /* USER CODE BEGIN Init */
  lcd_init();
 8000fb0:	f7ff ff90 	bl	8000ed4 <lcd_init>
  lcd_clear();
 8000fb4:	f7ff ff58 	bl	8000e68 <lcd_clear>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f8e4 	bl	8001184 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f000 fa20 	bl	8001400 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000fc0:	f000 f99c 	bl	80012fc <MX_CAN1_Init>
  MX_ADC1_Init();
 8000fc4:	f000 f948 	bl	8001258 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000fc8:	f000 f9ec 	bl	80013a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000fcc:	485e      	ldr	r0, [pc, #376]	; (8001148 <main+0x1a0>)
 8000fce:	f001 fac9 	bl	8002564 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	485c      	ldr	r0, [pc, #368]	; (8001148 <main+0x1a0>)
 8000fd6:	f001 fbe4 	bl	80027a2 <HAL_CAN_ActivateNotification>
  HAL_Delay(100);
 8000fda:	2064      	movs	r0, #100	; 0x64
 8000fdc:	f000 fcc2 	bl	8001964 <HAL_Delay>
  HAL_Delay(100);
 8000fe0:	2064      	movs	r0, #100	; 0x64
 8000fe2:	f000 fcbf 	bl	8001964 <HAL_Delay>

  TxHeader.DLC=3;
 8000fe6:	4b59      	ldr	r3, [pc, #356]	; (800114c <main+0x1a4>)
 8000fe8:	2203      	movs	r2, #3
 8000fea:	611a      	str	r2, [r3, #16]
  TxHeader.RTR=CAN_RTR_DATA;
 8000fec:	4b57      	ldr	r3, [pc, #348]	; (800114c <main+0x1a4>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
  TxHeader.IDE=CAN_ID_STD;
 8000ff2:	4b56      	ldr	r3, [pc, #344]	; (800114c <main+0x1a4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	609a      	str	r2, [r3, #8]
  TxHeader.ExtId=0x0;
 8000ff8:	4b54      	ldr	r3, [pc, #336]	; (800114c <main+0x1a4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	605a      	str	r2, [r3, #4]
  TxHeader.StdId=0x0AA;
 8000ffe:	4b53      	ldr	r3, [pc, #332]	; (800114c <main+0x1a4>)
 8001000:	22aa      	movs	r2, #170	; 0xaa
 8001002:	601a      	str	r2, [r3, #0]
  TxHeader.TransmitGlobalTime=DISABLE;
 8001004:	4b51      	ldr	r3, [pc, #324]	; (800114c <main+0x1a4>)
 8001006:	2200      	movs	r2, #0
 8001008:	751a      	strb	r2, [r3, #20]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	  	  if(Switch_Flag == 1){
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <main+0x1a8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d113      	bne.n	800103a <main+0x92>
	  	  		TxData[0] = 'S';	//yellow
 8001012:	4b50      	ldr	r3, [pc, #320]	; (8001154 <main+0x1ac>)
 8001014:	2253      	movs	r2, #83	; 0x53
 8001016:	701a      	strb	r2, [r3, #0]
	  	  		if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <main+0x1b0>)
 800101a:	4a4e      	ldr	r2, [pc, #312]	; (8001154 <main+0x1ac>)
 800101c:	494b      	ldr	r1, [pc, #300]	; (800114c <main+0x1a4>)
 800101e:	484a      	ldr	r0, [pc, #296]	; (8001148 <main+0x1a0>)
 8001020:	f001 fae4 	bl	80025ec <HAL_CAN_AddTxMessage>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <main+0x86>
	  	  			Error_Handler();
 800102a:	f000 fa71 	bl	8001510 <Error_Handler>
	  	  		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001034:	4849      	ldr	r0, [pc, #292]	; (800115c <main+0x1b4>)
 8001036:	f002 f8b7 	bl	80031a8 <HAL_GPIO_WritePin>
	  	  		}

	  	  	HAL_ADC_Start(&hadc1);
 800103a:	4849      	ldr	r0, [pc, #292]	; (8001160 <main+0x1b8>)
 800103c:	f000 fcfa 	bl	8001a34 <HAL_ADC_Start>
		   // ADC poll for conversion
		  HAL_ADC_PollForConversion(&hadc1, 100);
 8001040:	2164      	movs	r1, #100	; 0x64
 8001042:	4847      	ldr	r0, [pc, #284]	; (8001160 <main+0x1b8>)
 8001044:	f000 fdfb 	bl	8001c3e <HAL_ADC_PollForConversion>
		  // get the ADC conversion value
		  adc_value = HAL_ADC_GetValue(&hadc1);
 8001048:	4845      	ldr	r0, [pc, #276]	; (8001160 <main+0x1b8>)
 800104a:	f000 fe83 	bl	8001d54 <HAL_ADC_GetValue>
 800104e:	4603      	mov	r3, r0
 8001050:	461a      	mov	r2, r3
 8001052:	4b44      	ldr	r3, [pc, #272]	; (8001164 <main+0x1bc>)
 8001054:	601a      	str	r2, [r3, #0]
		  // end ADC convertion
		  HAL_ADC_Stop(&hadc1);
 8001056:	4842      	ldr	r0, [pc, #264]	; (8001160 <main+0x1b8>)
 8001058:	f000 fdbe 	bl	8001bd8 <HAL_ADC_Stop>
		  // convert ADC value into voltage
		  voltage = (adc_value*3.3)/4096;
 800105c:	4b41      	ldr	r3, [pc, #260]	; (8001164 <main+0x1bc>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa57 	bl	8000514 <__aeabi_i2d>
 8001066:	a336      	add	r3, pc, #216	; (adr r3, 8001140 <main+0x198>)
 8001068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800106c:	f7ff fabc 	bl	80005e8 <__aeabi_dmul>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4610      	mov	r0, r2
 8001076:	4619      	mov	r1, r3
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <main+0x1c0>)
 800107e:	f7ff fbdd 	bl	800083c <__aeabi_ddiv>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fcbf 	bl	8000a0c <__aeabi_d2f>
 800108e:	4603      	mov	r3, r0
 8001090:	4a36      	ldr	r2, [pc, #216]	; (800116c <main+0x1c4>)
 8001092:	6013      	str	r3, [r2, #0]
		  // convert the voltage into temperature
		  temp = voltage*100;
 8001094:	4b35      	ldr	r3, [pc, #212]	; (800116c <main+0x1c4>)
 8001096:	edd3 7a00 	vldr	s15, [r3]
 800109a:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8001170 <main+0x1c8>
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010a6:	ee17 2a90 	vmov	r2, s15
 80010aa:	4b32      	ldr	r3, [pc, #200]	; (8001174 <main+0x1cc>)
 80010ac:	601a      	str	r2, [r3, #0]
		  //convert the integer value to string,
		  //to display in the LCD
		  sprintf(temp_str,"%d\n", temp);
 80010ae:	4b31      	ldr	r3, [pc, #196]	; (8001174 <main+0x1cc>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	461a      	mov	r2, r3
 80010b4:	4930      	ldr	r1, [pc, #192]	; (8001178 <main+0x1d0>)
 80010b6:	4831      	ldr	r0, [pc, #196]	; (800117c <main+0x1d4>)
 80010b8:	f003 f978 	bl	80043ac <siprintf>
		  HAL_Delay(1000);
 80010bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010c0:	f000 fc50 	bl	8001964 <HAL_Delay>
		  lcd_clear();
 80010c4:	f7ff fed0 	bl	8000e68 <lcd_clear>
		  lcd_put_cur(0, 0);
 80010c8:	2100      	movs	r1, #0
 80010ca:	2000      	movs	r0, #0
 80010cc:	f7ff fee3 	bl	8000e96 <lcd_put_cur>
		  // just a random string display into LCD
		  lcd_send_string("Temperature: ");
 80010d0:	482b      	ldr	r0, [pc, #172]	; (8001180 <main+0x1d8>)
 80010d2:	f7ff ff3c 	bl	8000f4e <lcd_send_string>
		  // LCD cursor point at row 1 column 0
		  lcd_put_cur(1, 0);
 80010d6:	2100      	movs	r1, #0
 80010d8:	2001      	movs	r0, #1
 80010da:	f7ff fedc 	bl	8000e96 <lcd_put_cur>
		  // print the temperature value to LCD display
		  lcd_send_string(temp_str);
 80010de:	4827      	ldr	r0, [pc, #156]	; (800117c <main+0x1d4>)
 80010e0:	f7ff ff35 	bl	8000f4e <lcd_send_string>
		  // LCD cursor point at row 1 column 2
		  lcd_put_cur(1, 2);
 80010e4:	2102      	movs	r1, #2
 80010e6:	2001      	movs	r0, #1
 80010e8:	f7ff fed5 	bl	8000e96 <lcd_put_cur>
		  // print the (degree) sign into LCD
		  lcd_send_data(0xDF);
 80010ec:	20df      	movs	r0, #223	; 0xdf
 80010ee:	f7ff fe8b 	bl	8000e08 <lcd_send_data>
		  // LCD cursor point at row 1 column 3
		  lcd_put_cur(1, 3);
 80010f2:	2103      	movs	r1, #3
 80010f4:	2001      	movs	r0, #1
 80010f6:	f7ff fece 	bl	8000e96 <lcd_put_cur>
		  // print the (Celsius) sign into LCD
		  lcd_send_data('C');
 80010fa:	2043      	movs	r0, #67	; 0x43
 80010fc:	f7ff fe84 	bl	8000e08 <lcd_send_data>


		  if(temp>=25)
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <main+0x1cc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b18      	cmp	r3, #24
 8001106:	dd14      	ble.n	8001132 <main+0x18a>
		  {
			  TxData[1] = 'T';	//yellow
 8001108:	4b12      	ldr	r3, [pc, #72]	; (8001154 <main+0x1ac>)
 800110a:	2254      	movs	r2, #84	; 0x54
 800110c:	705a      	strb	r2, [r3, #1]
				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <main+0x1b0>)
 8001110:	4a10      	ldr	r2, [pc, #64]	; (8001154 <main+0x1ac>)
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <main+0x1a4>)
 8001114:	480c      	ldr	r0, [pc, #48]	; (8001148 <main+0x1a0>)
 8001116:	f001 fa69 	bl	80025ec <HAL_CAN_AddTxMessage>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <main+0x17c>
					Error_Handler();
 8001120:	f000 f9f6 	bl	8001510 <Error_Handler>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001124:	2201      	movs	r2, #1
 8001126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800112a:	480c      	ldr	r0, [pc, #48]	; (800115c <main+0x1b4>)
 800112c:	f002 f83c 	bl	80031a8 <HAL_GPIO_WritePin>
 8001130:	e76b      	b.n	800100a <main+0x62>
		  else
		  {
//			  TxData[1] = 'R';	//yellow
//				if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailBox) != HAL_OK)
//					Error_Handler();
			  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001132:	2200      	movs	r2, #0
 8001134:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <main+0x1b4>)
 800113a:	f002 f835 	bl	80031a8 <HAL_GPIO_WritePin>
	  	  	  if(Switch_Flag == 1){
 800113e:	e764      	b.n	800100a <main+0x62>
 8001140:	66666666 	.word	0x66666666
 8001144:	400a6666 	.word	0x400a6666
 8001148:	200000c0 	.word	0x200000c0
 800114c:	20000140 	.word	0x20000140
 8001150:	2000013c 	.word	0x2000013c
 8001154:	20000158 	.word	0x20000158
 8001158:	20000160 	.word	0x20000160
 800115c:	40020c00 	.word	0x40020c00
 8001160:	20000078 	.word	0x20000078
 8001164:	20000164 	.word	0x20000164
 8001168:	40b00000 	.word	0x40b00000
 800116c:	2000016c 	.word	0x2000016c
 8001170:	42c80000 	.word	0x42c80000
 8001174:	20000168 	.word	0x20000168
 8001178:	08004d0c 	.word	0x08004d0c
 800117c:	20000170 	.word	0x20000170
 8001180:	08004d10 	.word	0x08004d10

08001184 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b094      	sub	sp, #80	; 0x50
 8001188:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	2230      	movs	r2, #48	; 0x30
 8001190:	2100      	movs	r1, #0
 8001192:	4618      	mov	r0, r3
 8001194:	f003 f92a 	bl	80043ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001198:	f107 030c 	add.w	r3, r7, #12
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
 80011a0:	605a      	str	r2, [r3, #4]
 80011a2:	609a      	str	r2, [r3, #8]
 80011a4:	60da      	str	r2, [r3, #12]
 80011a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	4b28      	ldr	r3, [pc, #160]	; (8001250 <SystemClock_Config+0xcc>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	4a27      	ldr	r2, [pc, #156]	; (8001250 <SystemClock_Config+0xcc>)
 80011b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b6:	6413      	str	r3, [r2, #64]	; 0x40
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <SystemClock_Config+0xcc>)
 80011ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <SystemClock_Config+0xd0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a21      	ldr	r2, [pc, #132]	; (8001254 <SystemClock_Config+0xd0>)
 80011ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <SystemClock_Config+0xd0>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011ea:	2302      	movs	r3, #2
 80011ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80011f8:	2348      	movs	r3, #72	; 0x48
 80011fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001200:	2307      	movs	r3, #7
 8001202:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4618      	mov	r0, r3
 800120a:	f002 fc4b 	bl	8003aa4 <HAL_RCC_OscConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001214:	f000 f97c 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001218:	230f      	movs	r3, #15
 800121a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800121c:	2302      	movs	r3, #2
 800121e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001228:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2102      	movs	r1, #2
 8001236:	4618      	mov	r0, r3
 8001238:	f002 feac 	bl	8003f94 <HAL_RCC_ClockConfig>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001242:	f000 f965 	bl	8001510 <Error_Handler>
  }
}
 8001246:	bf00      	nop
 8001248:	3750      	adds	r7, #80	; 0x50
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800126a:	4b21      	ldr	r3, [pc, #132]	; (80012f0 <MX_ADC1_Init+0x98>)
 800126c:	4a21      	ldr	r2, [pc, #132]	; (80012f4 <MX_ADC1_Init+0x9c>)
 800126e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001276:	4b1e      	ldr	r3, [pc, #120]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800127c:	4b1c      	ldr	r3, [pc, #112]	; (80012f0 <MX_ADC1_Init+0x98>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001282:	4b1b      	ldr	r3, [pc, #108]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001288:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <MX_ADC1_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001290:	4b17      	ldr	r3, [pc, #92]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001292:	2200      	movs	r2, #0
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001296:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <MX_ADC1_Init+0x98>)
 8001298:	4a17      	ldr	r2, [pc, #92]	; (80012f8 <MX_ADC1_Init+0xa0>)
 800129a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800129c:	4b14      	ldr	r3, [pc, #80]	; (80012f0 <MX_ADC1_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80012a2:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012a4:	2201      	movs	r2, #1
 80012a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80012a8:	4b11      	ldr	r3, [pc, #68]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012b2:	2201      	movs	r2, #1
 80012b4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012b6:	480e      	ldr	r0, [pc, #56]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012b8:	f000 fb78 	bl	80019ac <HAL_ADC_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80012c2:	f000 f925 	bl	8001510 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012c6:	2301      	movs	r3, #1
 80012c8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d2:	463b      	mov	r3, r7
 80012d4:	4619      	mov	r1, r3
 80012d6:	4806      	ldr	r0, [pc, #24]	; (80012f0 <MX_ADC1_Init+0x98>)
 80012d8:	f000 fd4a 	bl	8001d70 <HAL_ADC_ConfigChannel>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80012e2:	f000 f915 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000078 	.word	0x20000078
 80012f4:	40012000 	.word	0x40012000
 80012f8:	0f000001 	.word	0x0f000001

080012fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08a      	sub	sp, #40	; 0x28
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001302:	4b26      	ldr	r3, [pc, #152]	; (800139c <MX_CAN1_Init+0xa0>)
 8001304:	4a26      	ldr	r2, [pc, #152]	; (80013a0 <MX_CAN1_Init+0xa4>)
 8001306:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001308:	4b24      	ldr	r3, [pc, #144]	; (800139c <MX_CAN1_Init+0xa0>)
 800130a:	2212      	movs	r2, #18
 800130c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800130e:	4b23      	ldr	r3, [pc, #140]	; (800139c <MX_CAN1_Init+0xa0>)
 8001310:	2200      	movs	r2, #0
 8001312:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_CAN1_Init+0xa0>)
 8001316:	2200      	movs	r2, #0
 8001318:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800131a:	4b20      	ldr	r3, [pc, #128]	; (800139c <MX_CAN1_Init+0xa0>)
 800131c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001320:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001322:	4b1e      	ldr	r3, [pc, #120]	; (800139c <MX_CAN1_Init+0xa0>)
 8001324:	2200      	movs	r2, #0
 8001326:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001328:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_CAN1_Init+0xa0>)
 800132a:	2200      	movs	r2, #0
 800132c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800132e:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_CAN1_Init+0xa0>)
 8001330:	2200      	movs	r2, #0
 8001332:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001334:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_CAN1_Init+0xa0>)
 8001336:	2200      	movs	r2, #0
 8001338:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_CAN1_Init+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_CAN1_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_CAN1_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_CAN1_Init+0xa0>)
 800134e:	f000 ff2d 	bl	80021ac <HAL_CAN_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001358:	f000 f8da 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canFilterConfig;
   canFilterConfig.FilterActivation=CAN_FILTER_ENABLE;
 800135c:	2301      	movs	r3, #1
 800135e:	623b      	str	r3, [r7, #32]
   canFilterConfig.SlaveStartFilterBank=14;
 8001360:	230e      	movs	r3, #14
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
   canFilterConfig.FilterBank=2;
 8001364:	2302      	movs	r3, #2
 8001366:	617b      	str	r3, [r7, #20]
   canFilterConfig.FilterFIFOAssignment=CAN_RX_FIFO0;
 8001368:	2300      	movs	r3, #0
 800136a:	613b      	str	r3, [r7, #16]
   canFilterConfig.FilterScale=CAN_FILTERSCALE_32BIT;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
   canFilterConfig.FilterMode=CAN_FILTERMODE_IDMASK;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]
   canFilterConfig.FilterMaskIdLow=0x0000;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
   canFilterConfig.FilterMaskIdHigh=0xFF00;
 8001378:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800137c:	60bb      	str	r3, [r7, #8]
   canFilterConfig.FilterIdLow=0x0000;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
   canFilterConfig.FilterIdHigh=0x1500;
 8001382:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
 8001386:	603b      	str	r3, [r7, #0]
   HAL_CAN_ConfigFilter(&hcan1, &canFilterConfig);
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_CAN1_Init+0xa0>)
 800138e:	f001 f809 	bl	80023a4 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200000c0 	.word	0x200000c0
 80013a0:	40006400 	.word	0x40006400

080013a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a8:	4b12      	ldr	r3, [pc, #72]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013aa:	4a13      	ldr	r2, [pc, #76]	; (80013f8 <MX_I2C1_Init+0x54>)
 80013ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013ae:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013b0:	4a12      	ldr	r2, [pc, #72]	; (80013fc <MX_I2C1_Init+0x58>)
 80013b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013b4:	4b0f      	ldr	r3, [pc, #60]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013ba:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013c0:	4b0c      	ldr	r3, [pc, #48]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d4:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013e0:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_I2C1_Init+0x50>)
 80013e2:	f001 ff13 	bl	800320c <HAL_I2C_Init>
 80013e6:	4603      	mov	r3, r0
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d001      	beq.n	80013f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ec:	f000 f890 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013f0:	bf00      	nop
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	200000e8 	.word	0x200000e8
 80013f8:	40005400 	.word	0x40005400
 80013fc:	000186a0 	.word	0x000186a0

08001400 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b08a      	sub	sp, #40	; 0x28
 8001404:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001406:	f107 0314 	add.w	r3, r7, #20
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]
 8001412:	60da      	str	r2, [r3, #12]
 8001414:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b32      	ldr	r3, [pc, #200]	; (80014e4 <MX_GPIO_Init+0xe4>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a31      	ldr	r2, [pc, #196]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001420:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a2a      	ldr	r2, [pc, #168]	; (80014e4 <MX_GPIO_Init+0xe4>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b28      	ldr	r3, [pc, #160]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b24      	ldr	r3, [pc, #144]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a23      	ldr	r2, [pc, #140]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b21      	ldr	r3, [pc, #132]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b1d      	ldr	r3, [pc, #116]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <MX_GPIO_Init+0xe4>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b1a      	ldr	r3, [pc, #104]	; (80014e4 <MX_GPIO_Init+0xe4>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800148c:	4816      	ldr	r0, [pc, #88]	; (80014e8 <MX_GPIO_Init+0xe8>)
 800148e:	f001 fe8b 	bl	80031a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001492:	2301      	movs	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001496:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800149a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 0314 	add.w	r3, r7, #20
 80014a4:	4619      	mov	r1, r3
 80014a6:	4811      	ldr	r0, [pc, #68]	; (80014ec <MX_GPIO_Init+0xec>)
 80014a8:	f001 fce2 	bl	8002e70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014ac:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ba:	2300      	movs	r3, #0
 80014bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	4808      	ldr	r0, [pc, #32]	; (80014e8 <MX_GPIO_Init+0xe8>)
 80014c6:	f001 fcd3 	bl	8002e70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2006      	movs	r0, #6
 80014d0:	f001 fc97 	bl	8002e02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80014d4:	2006      	movs	r0, #6
 80014d6:	f001 fcb0 	bl	8002e3a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014da:	bf00      	nop
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020c00 	.word	0x40020c00
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fe:	4803      	ldr	r0, [pc, #12]	; (800150c <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8001500:	f001 fe52 	bl	80031a8 <HAL_GPIO_WritePin>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40020c00 	.word	0x40020c00

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_MspInit+0x4c>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	4a0f      	ldr	r2, [pc, #60]	; (8001568 <HAL_MspInit+0x4c>)
 800152c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001530:	6453      	str	r3, [r2, #68]	; 0x44
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <HAL_MspInit+0x4c>)
 8001534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001536:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b09      	ldr	r3, [pc, #36]	; (8001568 <HAL_MspInit+0x4c>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	4a08      	ldr	r2, [pc, #32]	; (8001568 <HAL_MspInit+0x4c>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6413      	str	r3, [r2, #64]	; 0x40
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_MspInit+0x4c>)
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800155a:	2007      	movs	r0, #7
 800155c:	f001 fc46 	bl	8002dec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40023800 	.word	0x40023800

0800156c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_ADC_MspInit+0x7c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d127      	bne.n	80015de <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	613b      	str	r3, [r7, #16]
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_ADC_MspInit+0x80>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a15      	ldr	r2, [pc, #84]	; (80015ec <HAL_ADC_MspInit+0x80>)
 8001598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b13      	ldr	r3, [pc, #76]	; (80015ec <HAL_ADC_MspInit+0x80>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	4b0f      	ldr	r3, [pc, #60]	; (80015ec <HAL_ADC_MspInit+0x80>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_ADC_MspInit+0x80>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_ADC_MspInit+0x80>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0301 	and.w	r3, r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015c6:	2302      	movs	r3, #2
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ce:	2300      	movs	r3, #0
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4805      	ldr	r0, [pc, #20]	; (80015f0 <HAL_ADC_MspInit+0x84>)
 80015da:	f001 fc49 	bl	8002e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015de:	bf00      	nop
 80015e0:	3728      	adds	r7, #40	; 0x28
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40012000 	.word	0x40012000
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020000 	.word	0x40020000

080015f4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	; 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_CAN_MspInit+0x94>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d134      	bne.n	8001680 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <HAL_CAN_MspInit+0x98>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161e:	4a1b      	ldr	r2, [pc, #108]	; (800168c <HAL_CAN_MspInit+0x98>)
 8001620:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001624:	6413      	str	r3, [r2, #64]	; 0x40
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <HAL_CAN_MspInit+0x98>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b15      	ldr	r3, [pc, #84]	; (800168c <HAL_CAN_MspInit+0x98>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a14      	ldr	r2, [pc, #80]	; (800168c <HAL_CAN_MspInit+0x98>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b12      	ldr	r3, [pc, #72]	; (800168c <HAL_CAN_MspInit+0x98>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800164e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001660:	2309      	movs	r3, #9
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4809      	ldr	r0, [pc, #36]	; (8001690 <HAL_CAN_MspInit+0x9c>)
 800166c:	f001 fc00 	bl	8002e70 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001670:	2200      	movs	r2, #0
 8001672:	2100      	movs	r1, #0
 8001674:	2014      	movs	r0, #20
 8001676:	f001 fbc4 	bl	8002e02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800167a:	2014      	movs	r0, #20
 800167c:	f001 fbdd 	bl	8002e3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	; 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40006400 	.word	0x40006400
 800168c:	40023800 	.word	0x40023800
 8001690:	40020400 	.word	0x40020400

08001694 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08a      	sub	sp, #40	; 0x28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_I2C_MspInit+0x84>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d12b      	bne.n	800170e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	4b18      	ldr	r3, [pc, #96]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a17      	ldr	r2, [pc, #92]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016c0:	f043 0302 	orr.w	r3, r3, #2
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0302 	and.w	r3, r3, #2
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016d2:	23c0      	movs	r3, #192	; 0xc0
 80016d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016d6:	2312      	movs	r3, #18
 80016d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016de:	2303      	movs	r3, #3
 80016e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016e2:	2304      	movs	r3, #4
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 0314 	add.w	r3, r7, #20
 80016ea:	4619      	mov	r1, r3
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <HAL_I2C_MspInit+0x8c>)
 80016ee:	f001 fbbf 	bl	8002e70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_I2C_MspInit+0x88>)
 80016fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_I2C_MspInit+0x88>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800170e:	bf00      	nop
 8001710:	3728      	adds	r7, #40	; 0x28
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40005400 	.word	0x40005400
 800171c:	40023800 	.word	0x40023800
 8001720:	40020400 	.word	0x40020400

08001724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001728:	e7fe      	b.n	8001728 <NMI_Handler+0x4>

0800172a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800172a:	b480      	push	{r7}
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172e:	e7fe      	b.n	800172e <HardFault_Handler+0x4>

08001730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001734:	e7fe      	b.n	8001734 <MemManage_Handler+0x4>

08001736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001736:	b480      	push	{r7}
 8001738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800173a:	e7fe      	b.n	800173a <BusFault_Handler+0x4>

0800173c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001740:	e7fe      	b.n	8001740 <UsageFault_Handler+0x4>

08001742 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001742:	b480      	push	{r7}
 8001744:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr

0800176c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001770:	f000 f8d8 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}

08001778 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800177c:	2001      	movs	r0, #1
 800177e:	f001 fd2d 	bl	80031dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800178c:	4802      	ldr	r0, [pc, #8]	; (8001798 <CAN1_RX0_IRQHandler+0x10>)
 800178e:	f001 f82e 	bl	80027ee <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200000c0 	.word	0x200000c0

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	; (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	; (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f002 fe16 	bl	80043fc <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	; (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	; (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20020000 	.word	0x20020000
 80017fc:	00000400 	.word	0x00000400
 8001800:	20000184 	.word	0x20000184
 8001804:	200002d8 	.word	0x200002d8

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	; (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001864 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001830:	480d      	ldr	r0, [pc, #52]	; (8001868 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001832:	490e      	ldr	r1, [pc, #56]	; (800186c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001838:	e002      	b.n	8001840 <LoopCopyDataInit>

0800183a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800183c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183e:	3304      	adds	r3, #4

08001840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001844:	d3f9      	bcc.n	800183a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001846:	4a0b      	ldr	r2, [pc, #44]	; (8001874 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001848:	4c0b      	ldr	r4, [pc, #44]	; (8001878 <LoopFillZerobss+0x26>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800184c:	e001      	b.n	8001852 <LoopFillZerobss>

0800184e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001850:	3204      	adds	r2, #4

08001852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001854:	d3fb      	bcc.n	800184e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001856:	f7ff ffd7 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185a:	f002 fdd5 	bl	8004408 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fba3 	bl	8000fa8 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001864:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001870:	08004d7c 	.word	0x08004d7c
  ldr r2, =_sbss
 8001874:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001878:	200002d4 	.word	0x200002d4

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f001 fa9f 	bl	8002dec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe32 	bl	800151c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 fab7 	bl	8002e56 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001900:	f001 fa7f 	bl	8002e02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	; (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	; (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	20000188 	.word	0x20000188

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	; (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000188 	.word	0x20000188

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	; (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e033      	b.n	8001a2a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fdce 	bl	800156c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ee:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019f2:	f023 0302 	bic.w	r3, r3, #2
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fad8 	bl	8001fb4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b085      	sub	sp, #20
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_ADC_Start+0x1a>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e0b2      	b.n	8001bb4 <HAL_ADC_Start+0x180>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d018      	beq.n	8001a96 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a74:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_ADC_Start+0x18c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <HAL_ADC_Start+0x190>)
 8001a7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7e:	0c9a      	lsrs	r2, r3, #18
 8001a80:	4613      	mov	r3, r2
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	4413      	add	r3, r2
 8001a86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f9      	bne.n	8001a8a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d17a      	bne.n	8001b9a <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ace:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f023 0206 	bic.w	r2, r3, #6
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b00:	4b31      	ldr	r3, [pc, #196]	; (8001bc8 <HAL_ADC_Start+0x194>)
 8001b02:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b0c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d12a      	bne.n	8001b70 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a2b      	ldr	r2, [pc, #172]	; (8001bcc <HAL_ADC_Start+0x198>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d015      	beq.n	8001b50 <HAL_ADC_Start+0x11c>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a29      	ldr	r2, [pc, #164]	; (8001bd0 <HAL_ADC_Start+0x19c>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d105      	bne.n	8001b3a <HAL_ADC_Start+0x106>
 8001b2e:	4b26      	ldr	r3, [pc, #152]	; (8001bc8 <HAL_ADC_Start+0x194>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d00a      	beq.n	8001b50 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a25      	ldr	r2, [pc, #148]	; (8001bd4 <HAL_ADC_Start+0x1a0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d136      	bne.n	8001bb2 <HAL_ADC_Start+0x17e>
 8001b44:	4b20      	ldr	r3, [pc, #128]	; (8001bc8 <HAL_ADC_Start+0x194>)
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d130      	bne.n	8001bb2 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d129      	bne.n	8001bb2 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	e020      	b.n	8001bb2 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a15      	ldr	r2, [pc, #84]	; (8001bcc <HAL_ADC_Start+0x198>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d11b      	bne.n	8001bb2 <HAL_ADC_Start+0x17e>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d114      	bne.n	8001bb2 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689a      	ldr	r2, [r3, #8]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e00b      	b.n	8001bb2 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9e:	f043 0210 	orr.w	r2, r3, #16
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	f043 0201 	orr.w	r2, r3, #1
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	20000000 	.word	0x20000000
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	40012300 	.word	0x40012300
 8001bcc:	40012000 	.word	0x40012000
 8001bd0:	40012100 	.word	0x40012100
 8001bd4:	40012200 	.word	0x40012200

08001bd8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Stop+0x16>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e021      	b.n	8001c32 <HAL_ADC_Stop+0x5a>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689a      	ldr	r2, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0201 	bic.w	r2, r2, #1
 8001c04:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d109      	bne.n	8001c28 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c1c:	f023 0301 	bic.w	r3, r3, #1
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b084      	sub	sp, #16
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
 8001c46:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5a:	d113      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c6a:	d10b      	bne.n	8001c84 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c70:	f043 0220 	orr.w	r2, r3, #32
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e063      	b.n	8001d4c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001c84:	f7ff fe62 	bl	800194c <HAL_GetTick>
 8001c88:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001c8a:	e021      	b.n	8001cd0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c92:	d01d      	beq.n	8001cd0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_ADC_PollForConversion+0x6c>
 8001c9a:	f7ff fe57 	bl	800194c <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d212      	bcs.n	8001cd0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d00b      	beq.n	8001cd0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbc:	f043 0204 	orr.w	r2, r3, #4
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e03d      	b.n	8001d4c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d1d6      	bne.n	8001c8c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0212 	mvn.w	r2, #18
 8001ce6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d123      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d11f      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d111      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d105      	bne.n	8001d4a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3710      	adds	r7, #16
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x1c>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e105      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x228>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2b09      	cmp	r3, #9
 8001d9a:	d925      	bls.n	8001de8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68d9      	ldr	r1, [r3, #12]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	3b1e      	subs	r3, #30
 8001db2:	2207      	movs	r2, #7
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43da      	mvns	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	400a      	ands	r2, r1
 8001dc0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68d9      	ldr	r1, [r3, #12]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	4403      	add	r3, r0
 8001dda:	3b1e      	subs	r3, #30
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	e022      	b.n	8001e2e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4613      	mov	r3, r2
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4413      	add	r3, r2
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6919      	ldr	r1, [r3, #16]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	4603      	mov	r3, r0
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	4403      	add	r3, r0
 8001e24:	409a      	lsls	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	2b06      	cmp	r3, #6
 8001e34:	d824      	bhi.n	8001e80 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685a      	ldr	r2, [r3, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	3b05      	subs	r3, #5
 8001e48:	221f      	movs	r2, #31
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43da      	mvns	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	400a      	ands	r2, r1
 8001e56:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	4618      	mov	r0, r3
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b05      	subs	r3, #5
 8001e72:	fa00 f203 	lsl.w	r2, r0, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	635a      	str	r2, [r3, #52]	; 0x34
 8001e7e:	e04c      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d824      	bhi.n	8001ed2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685a      	ldr	r2, [r3, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	3b23      	subs	r3, #35	; 0x23
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43da      	mvns	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	4413      	add	r3, r2
 8001ec2:	3b23      	subs	r3, #35	; 0x23
 8001ec4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
 8001ed0:	e023      	b.n	8001f1a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	4413      	add	r3, r2
 8001ee2:	3b41      	subs	r3, #65	; 0x41
 8001ee4:	221f      	movs	r2, #31
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43da      	mvns	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	400a      	ands	r2, r1
 8001ef2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	4618      	mov	r0, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	4613      	mov	r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	4413      	add	r3, r2
 8001f0c:	3b41      	subs	r3, #65	; 0x41
 8001f0e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_ADC_ConfigChannel+0x234>)
 8001f1c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a21      	ldr	r2, [pc, #132]	; (8001fa8 <HAL_ADC_ConfigChannel+0x238>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d109      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1cc>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d105      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a19      	ldr	r2, [pc, #100]	; (8001fa8 <HAL_ADC_ConfigChannel+0x238>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d123      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x21e>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b10      	cmp	r3, #16
 8001f4c:	d003      	beq.n	8001f56 <HAL_ADC_ConfigChannel+0x1e6>
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	2b11      	cmp	r3, #17
 8001f54:	d11b      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b10      	cmp	r3, #16
 8001f68:	d111      	bne.n	8001f8e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_ADC_ConfigChannel+0x23c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <HAL_ADC_ConfigChannel+0x240>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9a      	lsrs	r2, r3, #18
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f80:	e002      	b.n	8001f88 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f9      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3714      	adds	r7, #20
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	40012300 	.word	0x40012300
 8001fa8:	40012000 	.word	0x40012000
 8001fac:	20000000 	.word	0x20000000
 8001fb0:	431bde83 	.word	0x431bde83

08001fb4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fbc:	4b79      	ldr	r3, [pc, #484]	; (80021a4 <ADC_Init+0x1f0>)
 8001fbe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	431a      	orrs	r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fe8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6859      	ldr	r1, [r3, #4]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	021a      	lsls	r2, r3, #8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800200c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6859      	ldr	r1, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	689a      	ldr	r2, [r3, #8]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800202e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6899      	ldr	r1, [r3, #8]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	430a      	orrs	r2, r1
 8002040:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	4a58      	ldr	r2, [pc, #352]	; (80021a8 <ADC_Init+0x1f4>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d022      	beq.n	8002092 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6899      	ldr	r1, [r3, #8]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	430a      	orrs	r2, r1
 800206c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800207c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	e00f      	b.n	80020b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	689a      	ldr	r2, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0202 	bic.w	r2, r2, #2
 80020c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6899      	ldr	r1, [r3, #8]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	7e1b      	ldrb	r3, [r3, #24]
 80020cc:	005a      	lsls	r2, r3, #1
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d01b      	beq.n	8002118 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6859      	ldr	r1, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210a:	3b01      	subs	r3, #1
 800210c:	035a      	lsls	r2, r3, #13
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	430a      	orrs	r2, r1
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	e007      	b.n	8002128 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	3b01      	subs	r3, #1
 8002144:	051a      	lsls	r2, r3, #20
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	430a      	orrs	r2, r1
 800214c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689a      	ldr	r2, [r3, #8]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800215c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6899      	ldr	r1, [r3, #8]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800216a:	025a      	lsls	r2, r3, #9
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002182:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6899      	ldr	r1, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	029a      	lsls	r2, r3, #10
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]
}
 8002198:	bf00      	nop
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40012300 	.word	0x40012300
 80021a8:	0f000001 	.word	0x0f000001

080021ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e0ed      	b.n	800239a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d102      	bne.n	80021d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fa12 	bl	80015f4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0201 	orr.w	r2, r2, #1
 80021de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e0:	f7ff fbb4 	bl	800194c <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80021e6:	e012      	b.n	800220e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021e8:	f7ff fbb0 	bl	800194c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d90b      	bls.n	800220e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2205      	movs	r2, #5
 8002206:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e0c5      	b.n	800239a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0e5      	beq.n	80021e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f022 0202 	bic.w	r2, r2, #2
 800222a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800222c:	f7ff fb8e 	bl	800194c <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002232:	e012      	b.n	800225a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002234:	f7ff fb8a 	bl	800194c <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b0a      	cmp	r3, #10
 8002240:	d90b      	bls.n	800225a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2205      	movs	r2, #5
 8002252:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e09f      	b.n	800239a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1e5      	bne.n	8002234 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	7e1b      	ldrb	r3, [r3, #24]
 800226c:	2b01      	cmp	r3, #1
 800226e:	d108      	bne.n	8002282 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e007      	b.n	8002292 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002290:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e5b      	ldrb	r3, [r3, #25]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d108      	bne.n	80022ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	e007      	b.n	80022bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	7e9b      	ldrb	r3, [r3, #26]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d108      	bne.n	80022d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0220 	orr.w	r2, r2, #32
 80022d2:	601a      	str	r2, [r3, #0]
 80022d4:	e007      	b.n	80022e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 0220 	bic.w	r2, r2, #32
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7edb      	ldrb	r3, [r3, #27]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d108      	bne.n	8002300 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f022 0210 	bic.w	r2, r2, #16
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e007      	b.n	8002310 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0210 	orr.w	r2, r2, #16
 800230e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	7f1b      	ldrb	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d108      	bne.n	800232a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0208 	orr.w	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	e007      	b.n	800233a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0208 	bic.w	r2, r2, #8
 8002338:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7f5b      	ldrb	r3, [r3, #29]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d108      	bne.n	8002354 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f042 0204 	orr.w	r2, r2, #4
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	e007      	b.n	8002364 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0204 	bic.w	r2, r2, #4
 8002362:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	431a      	orrs	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	695b      	ldr	r3, [r3, #20]
 8002378:	ea42 0103 	orr.w	r1, r2, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	1e5a      	subs	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2200      	movs	r2, #0
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b087      	sub	sp, #28
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023ba:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d003      	beq.n	80023ca <HAL_CAN_ConfigFilter+0x26>
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 80be 	bne.w	8002546 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80023ca:	4b65      	ldr	r3, [pc, #404]	; (8002560 <HAL_CAN_ConfigFilter+0x1bc>)
 80023cc:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023d4:	f043 0201 	orr.w	r2, r3, #1
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023e4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	431a      	orrs	r2, r3
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2201      	movs	r2, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	43db      	mvns	r3, r3
 800241c:	401a      	ands	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d123      	bne.n	8002474 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	43db      	mvns	r3, r3
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800244e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3248      	adds	r2, #72	; 0x48
 8002454:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002468:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800246a:	6979      	ldr	r1, [r7, #20]
 800246c:	3348      	adds	r3, #72	; 0x48
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	440b      	add	r3, r1
 8002472:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d122      	bne.n	80024c2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	431a      	orrs	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800249c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3248      	adds	r2, #72	; 0x48
 80024a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80024b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80024b8:	6979      	ldr	r1, [r7, #20]
 80024ba:	3348      	adds	r3, #72	; 0x48
 80024bc:	00db      	lsls	r3, r3, #3
 80024be:	440b      	add	r3, r1
 80024c0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	699b      	ldr	r3, [r3, #24]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43db      	mvns	r3, r3
 80024d4:	401a      	ands	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80024dc:	e007      	b.n	80024ee <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	43db      	mvns	r3, r3
 8002500:	401a      	ands	r2, r3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002508:	e007      	b.n	800251a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	431a      	orrs	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	431a      	orrs	r2, r3
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002538:	f023 0201 	bic.w	r2, r3, #1
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e006      	b.n	8002554 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
  }
}
 8002554:	4618      	mov	r0, r3
 8002556:	371c      	adds	r7, #28
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	40006400 	.word	0x40006400

08002564 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2b01      	cmp	r3, #1
 8002576:	d12e      	bne.n	80025d6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0201 	bic.w	r2, r2, #1
 800258e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002590:	f7ff f9dc 	bl	800194c <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002596:	e012      	b.n	80025be <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002598:	f7ff f9d8 	bl	800194c <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b0a      	cmp	r3, #10
 80025a4:	d90b      	bls.n	80025be <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2205      	movs	r2, #5
 80025b6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e012      	b.n	80025e4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e5      	bne.n	8002598 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	e006      	b.n	80025e4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
  }
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
 80025f8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002600:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800260a:	7ffb      	ldrb	r3, [r7, #31]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d003      	beq.n	8002618 <HAL_CAN_AddTxMessage+0x2c>
 8002610:	7ffb      	ldrb	r3, [r7, #31]
 8002612:	2b02      	cmp	r3, #2
 8002614:	f040 80b8 	bne.w	8002788 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10a      	bne.n	8002638 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002628:	2b00      	cmp	r3, #0
 800262a:	d105      	bne.n	8002638 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80a0 	beq.w	8002778 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	0e1b      	lsrs	r3, r3, #24
 800263c:	f003 0303 	and.w	r3, r3, #3
 8002640:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d907      	bls.n	8002658 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e09e      	b.n	8002796 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002658:	2201      	movs	r2, #1
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	409a      	lsls	r2, r3
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10d      	bne.n	8002686 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002674:	68f9      	ldr	r1, [r7, #12]
 8002676:	6809      	ldr	r1, [r1, #0]
 8002678:	431a      	orrs	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3318      	adds	r3, #24
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	440b      	add	r3, r1
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	e00f      	b.n	80026a6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002690:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002696:	68f9      	ldr	r1, [r7, #12]
 8002698:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800269a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3318      	adds	r3, #24
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	440b      	add	r3, r1
 80026a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	3318      	adds	r3, #24
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	440b      	add	r3, r1
 80026b6:	3304      	adds	r3, #4
 80026b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	7d1b      	ldrb	r3, [r3, #20]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d111      	bne.n	80026e6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	3318      	adds	r3, #24
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68fa      	ldr	r2, [r7, #12]
 80026d4:	6811      	ldr	r1, [r2, #0]
 80026d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	3318      	adds	r3, #24
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	440b      	add	r3, r1
 80026e2:	3304      	adds	r3, #4
 80026e4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3307      	adds	r3, #7
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	061a      	lsls	r2, r3, #24
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3306      	adds	r3, #6
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	041b      	lsls	r3, r3, #16
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3305      	adds	r3, #5
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	021b      	lsls	r3, r3, #8
 8002700:	4313      	orrs	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	3204      	adds	r2, #4
 8002706:	7812      	ldrb	r2, [r2, #0]
 8002708:	4610      	mov	r0, r2
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	6811      	ldr	r1, [r2, #0]
 800270e:	ea43 0200 	orr.w	r2, r3, r0
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	011b      	lsls	r3, r3, #4
 8002716:	440b      	add	r3, r1
 8002718:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800271c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3303      	adds	r3, #3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	061a      	lsls	r2, r3, #24
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3302      	adds	r3, #2
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	041b      	lsls	r3, r3, #16
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	3301      	adds	r3, #1
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	4313      	orrs	r3, r2
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	4610      	mov	r0, r2
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	6811      	ldr	r1, [r2, #0]
 8002744:	ea43 0200 	orr.w	r2, r3, r0
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	440b      	add	r3, r1
 800274e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002752:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3318      	adds	r3, #24
 800275c:	011b      	lsls	r3, r3, #4
 800275e:	4413      	add	r3, r2
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	6811      	ldr	r1, [r2, #0]
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	3318      	adds	r3, #24
 800276e:	011b      	lsls	r3, r3, #4
 8002770:	440b      	add	r3, r1
 8002772:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	e00e      	b.n	8002796 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e006      	b.n	8002796 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
  }
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	6078      	str	r0, [r7, #4]
 80027aa:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d002      	beq.n	80027c0 <HAL_CAN_ActivateNotification+0x1e>
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d109      	bne.n	80027d4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6959      	ldr	r1, [r3, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80027d0:	2300      	movs	r3, #0
 80027d2:	e006      	b.n	80027e2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
  }
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3714      	adds	r7, #20
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b08a      	sub	sp, #40	; 0x28
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800282a:	6a3b      	ldr	r3, [r7, #32]
 800282c:	f003 0301 	and.w	r3, r3, #1
 8002830:	2b00      	cmp	r3, #0
 8002832:	d07c      	beq.n	800292e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d023      	beq.n	8002886 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2201      	movs	r2, #1
 8002844:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002846:	69bb      	ldr	r3, [r7, #24]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f7fe fe4d 	bl	80014f0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002856:	e016      	b.n	8002886 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	f003 0304 	and.w	r3, r3, #4
 800285e:	2b00      	cmp	r3, #0
 8002860:	d004      	beq.n	800286c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
 800286a:	e00c      	b.n	8002886 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
 800287e:	e002      	b.n	8002886 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f97f 	bl	8002b84 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d024      	beq.n	80028da <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002898:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f959 	bl	8002b5c <HAL_CAN_TxMailbox1CompleteCallback>
 80028aa:	e016      	b.n	80028da <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d004      	beq.n	80028c0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028bc:	627b      	str	r3, [r7, #36]	; 0x24
 80028be:	e00c      	b.n	80028da <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80028ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
 80028d2:	e002      	b.n	80028da <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 f95f 	bl	8002b98 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d024      	beq.n	800292e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80028ec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d003      	beq.n	8002900 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 f939 	bl	8002b70 <HAL_CAN_TxMailbox2CompleteCallback>
 80028fe:	e016      	b.n	800292e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002900:	69bb      	ldr	r3, [r7, #24]
 8002902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d004      	beq.n	8002914 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	e00c      	b.n	800292e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d004      	beq.n	8002928 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	627b      	str	r3, [r7, #36]	; 0x24
 8002926:	e002      	b.n	800292e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f93f 	bl	8002bac <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d00c      	beq.n	8002952 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d007      	beq.n	8002952 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002944:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002948:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2210      	movs	r2, #16
 8002950:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2208      	movs	r2, #8
 800296c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 f930 	bl	8002bd4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b00      	cmp	r3, #0
 800298a:	d002      	beq.n	8002992 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f000 f917 	bl	8002bc0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00c      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	f003 0310 	and.w	r3, r3, #16
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80029a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2210      	movs	r2, #16
 80029b4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80029b6:	6a3b      	ldr	r3, [r7, #32]
 80029b8:	f003 0320 	and.w	r3, r3, #32
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d006      	beq.n	80029d8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2208      	movs	r2, #8
 80029d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f912 	bl	8002bfc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80029d8:	6a3b      	ldr	r3, [r7, #32]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f8f9 	bl	8002be8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0310 	and.w	r3, r3, #16
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2210      	movs	r2, #16
 8002a10:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8fc 	bl	8002c10 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	f003 0308 	and.w	r3, r3, #8
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d006      	beq.n	8002a3a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2208      	movs	r2, #8
 8002a32:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8f5 	bl	8002c24 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d07b      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d072      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a4e:	6a3b      	ldr	r3, [r7, #32]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d003      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d003      	beq.n	8002a86 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a80:	f043 0302 	orr.w	r3, r3, #2
 8002a84:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d008      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d003      	beq.n	8002aa2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002aa2:	6a3b      	ldr	r3, [r7, #32]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d043      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d03e      	beq.n	8002b34 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002abc:	2b60      	cmp	r3, #96	; 0x60
 8002abe:	d02b      	beq.n	8002b18 <HAL_CAN_IRQHandler+0x32a>
 8002ac0:	2b60      	cmp	r3, #96	; 0x60
 8002ac2:	d82e      	bhi.n	8002b22 <HAL_CAN_IRQHandler+0x334>
 8002ac4:	2b50      	cmp	r3, #80	; 0x50
 8002ac6:	d022      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x320>
 8002ac8:	2b50      	cmp	r3, #80	; 0x50
 8002aca:	d82a      	bhi.n	8002b22 <HAL_CAN_IRQHandler+0x334>
 8002acc:	2b40      	cmp	r3, #64	; 0x40
 8002ace:	d019      	beq.n	8002b04 <HAL_CAN_IRQHandler+0x316>
 8002ad0:	2b40      	cmp	r3, #64	; 0x40
 8002ad2:	d826      	bhi.n	8002b22 <HAL_CAN_IRQHandler+0x334>
 8002ad4:	2b30      	cmp	r3, #48	; 0x30
 8002ad6:	d010      	beq.n	8002afa <HAL_CAN_IRQHandler+0x30c>
 8002ad8:	2b30      	cmp	r3, #48	; 0x30
 8002ada:	d822      	bhi.n	8002b22 <HAL_CAN_IRQHandler+0x334>
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	d002      	beq.n	8002ae6 <HAL_CAN_IRQHandler+0x2f8>
 8002ae0:	2b20      	cmp	r3, #32
 8002ae2:	d005      	beq.n	8002af0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002ae4:	e01d      	b.n	8002b22 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	f043 0308 	orr.w	r3, r3, #8
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002aee:	e019      	b.n	8002b24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	f043 0310 	orr.w	r3, r3, #16
 8002af6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002af8:	e014      	b.n	8002b24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afc:	f043 0320 	orr.w	r3, r3, #32
 8002b00:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b02:	e00f      	b.n	8002b24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b0c:	e00a      	b.n	8002b24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b16:	e005      	b.n	8002b24 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b20:	e000      	b.n	8002b24 <HAL_CAN_IRQHandler+0x336>
            break;
 8002b22:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b32:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d008      	beq.n	8002b54 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f872 	bl	8002c38 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002b54:	bf00      	nop
 8002b56:	3728      	adds	r7, #40	; 0x28
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr

08002bac <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002bdc:	bf00      	nop
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b085      	sub	sp, #20
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f003 0307 	and.w	r3, r3, #7
 8002c5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c5c:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c62:	68ba      	ldr	r2, [r7, #8]
 8002c64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c7e:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <__NVIC_SetPriorityGrouping+0x44>)
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	60d3      	str	r3, [r2, #12]
}
 8002c84:	bf00      	nop
 8002c86:	3714      	adds	r7, #20
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	e000ed00 	.word	0xe000ed00

08002c94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <__NVIC_GetPriorityGrouping+0x18>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr
 8002cac:	e000ed00 	.word	0xe000ed00

08002cb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	db0b      	blt.n	8002cda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cc2:	79fb      	ldrb	r3, [r7, #7]
 8002cc4:	f003 021f 	and.w	r2, r3, #31
 8002cc8:	4907      	ldr	r1, [pc, #28]	; (8002ce8 <__NVIC_EnableIRQ+0x38>)
 8002cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cce:	095b      	lsrs	r3, r3, #5
 8002cd0:	2001      	movs	r0, #1
 8002cd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	e000e100 	.word	0xe000e100

08002cec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	6039      	str	r1, [r7, #0]
 8002cf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	db0a      	blt.n	8002d16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	490c      	ldr	r1, [pc, #48]	; (8002d38 <__NVIC_SetPriority+0x4c>)
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	0112      	lsls	r2, r2, #4
 8002d0c:	b2d2      	uxtb	r2, r2
 8002d0e:	440b      	add	r3, r1
 8002d10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d14:	e00a      	b.n	8002d2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	b2da      	uxtb	r2, r3
 8002d1a:	4908      	ldr	r1, [pc, #32]	; (8002d3c <__NVIC_SetPriority+0x50>)
 8002d1c:	79fb      	ldrb	r3, [r7, #7]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	3b04      	subs	r3, #4
 8002d24:	0112      	lsls	r2, r2, #4
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	440b      	add	r3, r1
 8002d2a:	761a      	strb	r2, [r3, #24]
}
 8002d2c:	bf00      	nop
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr
 8002d38:	e000e100 	.word	0xe000e100
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b089      	sub	sp, #36	; 0x24
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	60f8      	str	r0, [r7, #12]
 8002d48:	60b9      	str	r1, [r7, #8]
 8002d4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f1c3 0307 	rsb	r3, r3, #7
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	bf28      	it	cs
 8002d5e:	2304      	movcs	r3, #4
 8002d60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	3304      	adds	r3, #4
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d902      	bls.n	8002d70 <NVIC_EncodePriority+0x30>
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3b03      	subs	r3, #3
 8002d6e:	e000      	b.n	8002d72 <NVIC_EncodePriority+0x32>
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7e:	43da      	mvns	r2, r3
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	401a      	ands	r2, r3
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d88:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d92:	43d9      	mvns	r1, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	4313      	orrs	r3, r2
         );
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3724      	adds	r7, #36	; 0x24
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
	...

08002da8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002db8:	d301      	bcc.n	8002dbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e00f      	b.n	8002dde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dbe:	4a0a      	ldr	r2, [pc, #40]	; (8002de8 <SysTick_Config+0x40>)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dc6:	210f      	movs	r1, #15
 8002dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dcc:	f7ff ff8e 	bl	8002cec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <SysTick_Config+0x40>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dd6:	4b04      	ldr	r3, [pc, #16]	; (8002de8 <SysTick_Config+0x40>)
 8002dd8:	2207      	movs	r2, #7
 8002dda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	e000e010 	.word	0xe000e010

08002dec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7ff ff29 	bl	8002c4c <__NVIC_SetPriorityGrouping>
}
 8002dfa:	bf00      	nop
 8002dfc:	3708      	adds	r7, #8
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b086      	sub	sp, #24
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e14:	f7ff ff3e 	bl	8002c94 <__NVIC_GetPriorityGrouping>
 8002e18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	68b9      	ldr	r1, [r7, #8]
 8002e1e:	6978      	ldr	r0, [r7, #20]
 8002e20:	f7ff ff8e 	bl	8002d40 <NVIC_EncodePriority>
 8002e24:	4602      	mov	r2, r0
 8002e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff5d 	bl	8002cec <__NVIC_SetPriority>
}
 8002e32:	bf00      	nop
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b082      	sub	sp, #8
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff31 	bl	8002cb0 <__NVIC_EnableIRQ>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7ff ffa2 	bl	8002da8 <SysTick_Config>
 8002e64:	4603      	mov	r3, r0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	; 0x24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e86:	2300      	movs	r3, #0
 8002e88:	61fb      	str	r3, [r7, #28]
 8002e8a:	e16b      	b.n	8003164 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	fa02 f303 	lsl.w	r3, r2, r3
 8002e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	697a      	ldr	r2, [r7, #20]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	f040 815a 	bne.w	800315e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d005      	beq.n	8002ec2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d130      	bne.n	8002f24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	005b      	lsls	r3, r3, #1
 8002ecc:	2203      	movs	r2, #3
 8002ece:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed2:	43db      	mvns	r3, r3
 8002ed4:	69ba      	ldr	r2, [r7, #24]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	68da      	ldr	r2, [r3, #12]
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef8:	2201      	movs	r2, #1
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	43db      	mvns	r3, r3
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4013      	ands	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	f003 0201 	and.w	r2, r3, #1
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	fa02 f303 	lsl.w	r3, r2, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d017      	beq.n	8002f60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 0303 	and.w	r3, r3, #3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d123      	bne.n	8002fb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	08da      	lsrs	r2, r3, #3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3208      	adds	r2, #8
 8002f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	220f      	movs	r2, #15
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43db      	mvns	r3, r3
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	08da      	lsrs	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	3208      	adds	r2, #8
 8002fae:	69b9      	ldr	r1, [r7, #24]
 8002fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	43db      	mvns	r3, r3
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 0203 	and.w	r2, r3, #3
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80b4 	beq.w	800315e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	4b60      	ldr	r3, [pc, #384]	; (800317c <HAL_GPIO_Init+0x30c>)
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	4a5f      	ldr	r2, [pc, #380]	; (800317c <HAL_GPIO_Init+0x30c>)
 8003000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003004:	6453      	str	r3, [r2, #68]	; 0x44
 8003006:	4b5d      	ldr	r3, [pc, #372]	; (800317c <HAL_GPIO_Init+0x30c>)
 8003008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800300e:	60fb      	str	r3, [r7, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003012:	4a5b      	ldr	r2, [pc, #364]	; (8003180 <HAL_GPIO_Init+0x310>)
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	089b      	lsrs	r3, r3, #2
 8003018:	3302      	adds	r3, #2
 800301a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	220f      	movs	r2, #15
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_GPIO_Init+0x314>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d02b      	beq.n	8003096 <HAL_GPIO_Init+0x226>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a51      	ldr	r2, [pc, #324]	; (8003188 <HAL_GPIO_Init+0x318>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d025      	beq.n	8003092 <HAL_GPIO_Init+0x222>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4a50      	ldr	r2, [pc, #320]	; (800318c <HAL_GPIO_Init+0x31c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d01f      	beq.n	800308e <HAL_GPIO_Init+0x21e>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a4f      	ldr	r2, [pc, #316]	; (8003190 <HAL_GPIO_Init+0x320>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d019      	beq.n	800308a <HAL_GPIO_Init+0x21a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a4e      	ldr	r2, [pc, #312]	; (8003194 <HAL_GPIO_Init+0x324>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d013      	beq.n	8003086 <HAL_GPIO_Init+0x216>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a4d      	ldr	r2, [pc, #308]	; (8003198 <HAL_GPIO_Init+0x328>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00d      	beq.n	8003082 <HAL_GPIO_Init+0x212>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a4c      	ldr	r2, [pc, #304]	; (800319c <HAL_GPIO_Init+0x32c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d007      	beq.n	800307e <HAL_GPIO_Init+0x20e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a4b      	ldr	r2, [pc, #300]	; (80031a0 <HAL_GPIO_Init+0x330>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d101      	bne.n	800307a <HAL_GPIO_Init+0x20a>
 8003076:	2307      	movs	r3, #7
 8003078:	e00e      	b.n	8003098 <HAL_GPIO_Init+0x228>
 800307a:	2308      	movs	r3, #8
 800307c:	e00c      	b.n	8003098 <HAL_GPIO_Init+0x228>
 800307e:	2306      	movs	r3, #6
 8003080:	e00a      	b.n	8003098 <HAL_GPIO_Init+0x228>
 8003082:	2305      	movs	r3, #5
 8003084:	e008      	b.n	8003098 <HAL_GPIO_Init+0x228>
 8003086:	2304      	movs	r3, #4
 8003088:	e006      	b.n	8003098 <HAL_GPIO_Init+0x228>
 800308a:	2303      	movs	r3, #3
 800308c:	e004      	b.n	8003098 <HAL_GPIO_Init+0x228>
 800308e:	2302      	movs	r3, #2
 8003090:	e002      	b.n	8003098 <HAL_GPIO_Init+0x228>
 8003092:	2301      	movs	r3, #1
 8003094:	e000      	b.n	8003098 <HAL_GPIO_Init+0x228>
 8003096:	2300      	movs	r3, #0
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	f002 0203 	and.w	r2, r2, #3
 800309e:	0092      	lsls	r2, r2, #2
 80030a0:	4093      	lsls	r3, r2
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a8:	4935      	ldr	r1, [pc, #212]	; (8003180 <HAL_GPIO_Init+0x310>)
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	089b      	lsrs	r3, r3, #2
 80030ae:	3302      	adds	r3, #2
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030b6:	4b3b      	ldr	r3, [pc, #236]	; (80031a4 <HAL_GPIO_Init+0x334>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	43db      	mvns	r3, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4013      	ands	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030da:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_GPIO_Init+0x334>)
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e0:	4b30      	ldr	r3, [pc, #192]	; (80031a4 <HAL_GPIO_Init+0x334>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	4013      	ands	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4313      	orrs	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <HAL_GPIO_Init+0x334>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <HAL_GPIO_Init+0x334>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	43db      	mvns	r3, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4013      	ands	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800312e:	4a1d      	ldr	r2, [pc, #116]	; (80031a4 <HAL_GPIO_Init+0x334>)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003134:	4b1b      	ldr	r3, [pc, #108]	; (80031a4 <HAL_GPIO_Init+0x334>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	43db      	mvns	r3, r3
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	4013      	ands	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4313      	orrs	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003158:	4a12      	ldr	r2, [pc, #72]	; (80031a4 <HAL_GPIO_Init+0x334>)
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	3301      	adds	r3, #1
 8003162:	61fb      	str	r3, [r7, #28]
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	2b0f      	cmp	r3, #15
 8003168:	f67f ae90 	bls.w	8002e8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800316c:	bf00      	nop
 800316e:	bf00      	nop
 8003170:	3724      	adds	r7, #36	; 0x24
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40023800 	.word	0x40023800
 8003180:	40013800 	.word	0x40013800
 8003184:	40020000 	.word	0x40020000
 8003188:	40020400 	.word	0x40020400
 800318c:	40020800 	.word	0x40020800
 8003190:	40020c00 	.word	0x40020c00
 8003194:	40021000 	.word	0x40021000
 8003198:	40021400 	.word	0x40021400
 800319c:	40021800 	.word	0x40021800
 80031a0:	40021c00 	.word	0x40021c00
 80031a4:	40013c00 	.word	0x40013c00

080031a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
 80031b4:	4613      	mov	r3, r2
 80031b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031b8:	787b      	ldrb	r3, [r7, #1]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031c4:	e003      	b.n	80031ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031c6:	887b      	ldrh	r3, [r7, #2]
 80031c8:	041a      	lsls	r2, r3, #16
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	619a      	str	r2, [r3, #24]
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
	...

080031dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031e6:	4b08      	ldr	r3, [pc, #32]	; (8003208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	695a      	ldr	r2, [r3, #20]
 80031ea:	88fb      	ldrh	r3, [r7, #6]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d006      	beq.n	8003200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031f2:	4a05      	ldr	r2, [pc, #20]	; (8003208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031f8:	88fb      	ldrh	r3, [r7, #6]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7fd febc 	bl	8000f78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003200:	bf00      	nop
 8003202:	3708      	adds	r7, #8
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40013c00 	.word	0x40013c00

0800320c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e12b      	b.n	8003476 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fe fa2e 	bl	8001694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2224      	movs	r2, #36	; 0x24
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 0201 	bic.w	r2, r2, #1
 800324e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800326e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003270:	f001 f888 	bl	8004384 <HAL_RCC_GetPCLK1Freq>
 8003274:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4a81      	ldr	r2, [pc, #516]	; (8003480 <HAL_I2C_Init+0x274>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d807      	bhi.n	8003290 <HAL_I2C_Init+0x84>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a80      	ldr	r2, [pc, #512]	; (8003484 <HAL_I2C_Init+0x278>)
 8003284:	4293      	cmp	r3, r2
 8003286:	bf94      	ite	ls
 8003288:	2301      	movls	r3, #1
 800328a:	2300      	movhi	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e006      	b.n	800329e <HAL_I2C_Init+0x92>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	4a7d      	ldr	r2, [pc, #500]	; (8003488 <HAL_I2C_Init+0x27c>)
 8003294:	4293      	cmp	r3, r2
 8003296:	bf94      	ite	ls
 8003298:	2301      	movls	r3, #1
 800329a:	2300      	movhi	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0e7      	b.n	8003476 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4a78      	ldr	r2, [pc, #480]	; (800348c <HAL_I2C_Init+0x280>)
 80032aa:	fba2 2303 	umull	r2, r3, r2, r3
 80032ae:	0c9b      	lsrs	r3, r3, #18
 80032b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	68ba      	ldr	r2, [r7, #8]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4a6a      	ldr	r2, [pc, #424]	; (8003480 <HAL_I2C_Init+0x274>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d802      	bhi.n	80032e0 <HAL_I2C_Init+0xd4>
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	3301      	adds	r3, #1
 80032de:	e009      	b.n	80032f4 <HAL_I2C_Init+0xe8>
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a69      	ldr	r2, [pc, #420]	; (8003490 <HAL_I2C_Init+0x284>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	3301      	adds	r3, #1
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	6812      	ldr	r2, [r2, #0]
 80032f8:	430b      	orrs	r3, r1
 80032fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003306:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	495c      	ldr	r1, [pc, #368]	; (8003480 <HAL_I2C_Init+0x274>)
 8003310:	428b      	cmp	r3, r1
 8003312:	d819      	bhi.n	8003348 <HAL_I2C_Init+0x13c>
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	1e59      	subs	r1, r3, #1
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003322:	1c59      	adds	r1, r3, #1
 8003324:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003328:	400b      	ands	r3, r1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_I2C_Init+0x138>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1e59      	subs	r1, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	fbb1 f3f3 	udiv	r3, r1, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	e051      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 8003344:	2304      	movs	r3, #4
 8003346:	e04f      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d111      	bne.n	8003374 <HAL_I2C_Init+0x168>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1e58      	subs	r0, r3, #1
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	440b      	add	r3, r1
 800335e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003362:	3301      	adds	r3, #1
 8003364:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003368:	2b00      	cmp	r3, #0
 800336a:	bf0c      	ite	eq
 800336c:	2301      	moveq	r3, #1
 800336e:	2300      	movne	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	e012      	b.n	800339a <HAL_I2C_Init+0x18e>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	0099      	lsls	r1, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	fbb0 f3f3 	udiv	r3, r0, r3
 800338a:	3301      	adds	r3, #1
 800338c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf0c      	ite	eq
 8003394:	2301      	moveq	r3, #1
 8003396:	2300      	movne	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <HAL_I2C_Init+0x196>
 800339e:	2301      	movs	r3, #1
 80033a0:	e022      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10e      	bne.n	80033c8 <HAL_I2C_Init+0x1bc>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e58      	subs	r0, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	460b      	mov	r3, r1
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	440b      	add	r3, r1
 80033b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033bc:	3301      	adds	r3, #1
 80033be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033c6:	e00f      	b.n	80033e8 <HAL_I2C_Init+0x1dc>
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1e58      	subs	r0, r3, #1
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6859      	ldr	r1, [r3, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	440b      	add	r3, r1
 80033d6:	0099      	lsls	r1, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	6809      	ldr	r1, [r1, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	69da      	ldr	r2, [r3, #28]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	431a      	orrs	r2, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	430a      	orrs	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003416:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	6911      	ldr	r1, [r2, #16]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68d2      	ldr	r2, [r2, #12]
 8003422:	4311      	orrs	r1, r2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	430b      	orrs	r3, r1
 800342a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	430a      	orrs	r2, r1
 8003446:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 0201 	orr.w	r2, r2, #1
 8003456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2220      	movs	r2, #32
 8003462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	000186a0 	.word	0x000186a0
 8003484:	001e847f 	.word	0x001e847f
 8003488:	003d08ff 	.word	0x003d08ff
 800348c:	431bde83 	.word	0x431bde83
 8003490:	10624dd3 	.word	0x10624dd3

08003494 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af02      	add	r7, sp, #8
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	607a      	str	r2, [r7, #4]
 800349e:	461a      	mov	r2, r3
 80034a0:	460b      	mov	r3, r1
 80034a2:	817b      	strh	r3, [r7, #10]
 80034a4:	4613      	mov	r3, r2
 80034a6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034a8:	f7fe fa50 	bl	800194c <HAL_GetTick>
 80034ac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b20      	cmp	r3, #32
 80034b8:	f040 80e0 	bne.w	800367c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	2319      	movs	r3, #25
 80034c2:	2201      	movs	r2, #1
 80034c4:	4970      	ldr	r1, [pc, #448]	; (8003688 <HAL_I2C_Master_Transmit+0x1f4>)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f964 	bl	8003794 <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034d2:	2302      	movs	r3, #2
 80034d4:	e0d3      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d101      	bne.n	80034e4 <HAL_I2C_Master_Transmit+0x50>
 80034e0:	2302      	movs	r3, #2
 80034e2:	e0cc      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d007      	beq.n	800350a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0201 	orr.w	r2, r2, #1
 8003508:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003518:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2221      	movs	r2, #33	; 0x21
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2210      	movs	r2, #16
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	893a      	ldrh	r2, [r7, #8]
 800353a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	4a50      	ldr	r2, [pc, #320]	; (800368c <HAL_I2C_Master_Transmit+0x1f8>)
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800354c:	8979      	ldrh	r1, [r7, #10]
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6a3a      	ldr	r2, [r7, #32]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f89c 	bl	8003690 <I2C_MasterRequestWrite>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e08d      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	613b      	str	r3, [r7, #16]
 8003576:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003578:	e066      	b.n	8003648 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800357a:	697a      	ldr	r2, [r7, #20]
 800357c:	6a39      	ldr	r1, [r7, #32]
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f9de 	bl	8003940 <I2C_WaitOnTXEFlagUntilTimeout>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00d      	beq.n	80035a6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b04      	cmp	r3, #4
 8003590:	d107      	bne.n	80035a2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e06b      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	781a      	ldrb	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d11b      	bne.n	800361c <HAL_I2C_Master_Transmit+0x188>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d017      	beq.n	800361c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	781a      	ldrb	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	1c5a      	adds	r2, r3, #1
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	6a39      	ldr	r1, [r7, #32]
 8003620:	68f8      	ldr	r0, [r7, #12]
 8003622:	f000 f9ce 	bl	80039c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00d      	beq.n	8003648 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	2b04      	cmp	r3, #4
 8003632:	d107      	bne.n	8003644 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003642:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e01a      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	d194      	bne.n	800357a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800365e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003678:	2300      	movs	r3, #0
 800367a:	e000      	b.n	800367e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800367c:	2302      	movs	r3, #2
  }
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	00100002 	.word	0x00100002
 800368c:	ffff0000 	.word	0xffff0000

08003690 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af02      	add	r7, sp, #8
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	607a      	str	r2, [r7, #4]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	460b      	mov	r3, r1
 800369e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2b08      	cmp	r3, #8
 80036aa:	d006      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d003      	beq.n	80036ba <I2C_MasterRequestWrite+0x2a>
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036b8:	d108      	bne.n	80036cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	e00b      	b.n	80036e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d0:	2b12      	cmp	r3, #18
 80036d2:	d107      	bne.n	80036e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f84f 	bl	8003794 <I2C_WaitOnFlagUntilTimeout>
 80036f6:	4603      	mov	r3, r0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00d      	beq.n	8003718 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800370a:	d103      	bne.n	8003714 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e035      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003720:	d108      	bne.n	8003734 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	b2db      	uxtb	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003730:	611a      	str	r2, [r3, #16]
 8003732:	e01b      	b.n	800376c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003734:	897b      	ldrh	r3, [r7, #10]
 8003736:	11db      	asrs	r3, r3, #7
 8003738:	b2db      	uxtb	r3, r3
 800373a:	f003 0306 	and.w	r3, r3, #6
 800373e:	b2db      	uxtb	r3, r3
 8003740:	f063 030f 	orn	r3, r3, #15
 8003744:	b2da      	uxtb	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	490e      	ldr	r1, [pc, #56]	; (800378c <I2C_MasterRequestWrite+0xfc>)
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 f875 	bl	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e010      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003762:	897b      	ldrh	r3, [r7, #10]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	4907      	ldr	r1, [pc, #28]	; (8003790 <I2C_MasterRequestWrite+0x100>)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f865 	bl	8003842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	4618      	mov	r0, r3
 8003786:	3718      	adds	r7, #24
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}
 800378c:	00010008 	.word	0x00010008
 8003790:	00010002 	.word	0x00010002

08003794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037a4:	e025      	b.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037ac:	d021      	beq.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ae:	f7fe f8cd 	bl	800194c <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d302      	bcc.n	80037c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d116      	bne.n	80037f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e023      	b.n	800383a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	0c1b      	lsrs	r3, r3, #16
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d10d      	bne.n	8003818 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	4013      	ands	r3, r2
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	bf0c      	ite	eq
 800380e:	2301      	moveq	r3, #1
 8003810:	2300      	movne	r3, #0
 8003812:	b2db      	uxtb	r3, r3
 8003814:	461a      	mov	r2, r3
 8003816:	e00c      	b.n	8003832 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	43da      	mvns	r2, r3
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4013      	ands	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf0c      	ite	eq
 800382a:	2301      	moveq	r3, #1
 800382c:	2300      	movne	r3, #0
 800382e:	b2db      	uxtb	r3, r3
 8003830:	461a      	mov	r2, r3
 8003832:	79fb      	ldrb	r3, [r7, #7]
 8003834:	429a      	cmp	r2, r3
 8003836:	d0b6      	beq.n	80037a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b084      	sub	sp, #16
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	607a      	str	r2, [r7, #4]
 800384e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003850:	e051      	b.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800385c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003860:	d123      	bne.n	80038aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003870:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800387a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2200      	movs	r2, #0
 8003880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2220      	movs	r2, #32
 8003886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	f043 0204 	orr.w	r2, r3, #4
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e046      	b.n	8003938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038b0:	d021      	beq.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b2:	f7fe f84b 	bl	800194c <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d302      	bcc.n	80038c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d116      	bne.n	80038f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f043 0220 	orr.w	r2, r3, #32
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e020      	b.n	8003938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	0c1b      	lsrs	r3, r3, #16
 80038fa:	b2db      	uxtb	r3, r3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d10c      	bne.n	800391a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	4013      	ands	r3, r2
 800390c:	b29b      	uxth	r3, r3
 800390e:	2b00      	cmp	r3, #0
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	e00b      	b.n	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf14      	ite	ne
 800392c:	2301      	movne	r3, #1
 800392e:	2300      	moveq	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d18d      	bne.n	8003852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3710      	adds	r7, #16
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	60f8      	str	r0, [r7, #12]
 8003948:	60b9      	str	r1, [r7, #8]
 800394a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800394c:	e02d      	b.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800394e:	68f8      	ldr	r0, [r7, #12]
 8003950:	f000 f878 	bl	8003a44 <I2C_IsAcknowledgeFailed>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d001      	beq.n	800395e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e02d      	b.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003964:	d021      	beq.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fd fff1 	bl	800194c <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d116      	bne.n	80039aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f043 0220 	orr.w	r2, r3, #32
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e007      	b.n	80039ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039b4:	2b80      	cmp	r3, #128	; 0x80
 80039b6:	d1ca      	bne.n	800394e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039ce:	e02d      	b.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039d0:	68f8      	ldr	r0, [r7, #12]
 80039d2:	f000 f837 	bl	8003a44 <I2C_IsAcknowledgeFailed>
 80039d6:	4603      	mov	r3, r0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d001      	beq.n	80039e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e02d      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e6:	d021      	beq.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e8:	f7fd ffb0 	bl	800194c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2220      	movs	r2, #32
 8003a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	f043 0220 	orr.w	r2, r3, #32
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e007      	b.n	8003a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0304 	and.w	r3, r3, #4
 8003a36:	2b04      	cmp	r3, #4
 8003a38:	d1ca      	bne.n	80039d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a5a:	d11b      	bne.n	8003a94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e000      	b.n	8003a96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
	...

08003aa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e267      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d075      	beq.n	8003bae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ac2:	4b88      	ldr	r3, [pc, #544]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
 8003aca:	2b04      	cmp	r3, #4
 8003acc:	d00c      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b85      	ldr	r3, [pc, #532]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d112      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ada:	4b82      	ldr	r3, [pc, #520]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ae6:	d10b      	bne.n	8003b00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	4b7e      	ldr	r3, [pc, #504]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d05b      	beq.n	8003bac <HAL_RCC_OscConfig+0x108>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d157      	bne.n	8003bac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e242      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d106      	bne.n	8003b18 <HAL_RCC_OscConfig+0x74>
 8003b0a:	4b76      	ldr	r3, [pc, #472]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a75      	ldr	r2, [pc, #468]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e01d      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x98>
 8003b22:	4b70      	ldr	r3, [pc, #448]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6f      	ldr	r2, [pc, #444]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	4b6d      	ldr	r3, [pc, #436]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a6c      	ldr	r2, [pc, #432]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b38:	6013      	str	r3, [r2, #0]
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0xb0>
 8003b3c:	4b69      	ldr	r3, [pc, #420]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a68      	ldr	r2, [pc, #416]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b46:	6013      	str	r3, [r2, #0]
 8003b48:	4b66      	ldr	r3, [pc, #408]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a65      	ldr	r2, [pc, #404]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d013      	beq.n	8003b84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b5c:	f7fd fef6 	bl	800194c <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	e008      	b.n	8003b76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b64:	f7fd fef2 	bl	800194c <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	2b64      	cmp	r3, #100	; 0x64
 8003b70:	d901      	bls.n	8003b76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e207      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b76:	4b5b      	ldr	r3, [pc, #364]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f0      	beq.n	8003b64 <HAL_RCC_OscConfig+0xc0>
 8003b82:	e014      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b84:	f7fd fee2 	bl	800194c <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b8c:	f7fd fede 	bl	800194c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b64      	cmp	r3, #100	; 0x64
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1f3      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b9e:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1f0      	bne.n	8003b8c <HAL_RCC_OscConfig+0xe8>
 8003baa:	e000      	b.n	8003bae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d063      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bba:	4b4a      	ldr	r3, [pc, #296]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b47      	ldr	r3, [pc, #284]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d11c      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bd2:	4b44      	ldr	r3, [pc, #272]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d116      	bne.n	8003c0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	4b41      	ldr	r3, [pc, #260]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d005      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e1c7      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bf6:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	4937      	ldr	r1, [pc, #220]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	e03a      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d020      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c14:	4b34      	ldr	r3, [pc, #208]	; (8003ce8 <HAL_RCC_OscConfig+0x244>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1a:	f7fd fe97 	bl	800194c <HAL_GetTick>
 8003c1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c20:	e008      	b.n	8003c34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c22:	f7fd fe93 	bl	800194c <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	1ad3      	subs	r3, r2, r3
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d901      	bls.n	8003c34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e1a8      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0302 	and.w	r3, r3, #2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d0f0      	beq.n	8003c22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4925      	ldr	r1, [pc, #148]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	600b      	str	r3, [r1, #0]
 8003c54:	e015      	b.n	8003c82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <HAL_RCC_OscConfig+0x244>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fd fe76 	bl	800194c <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c64:	f7fd fe72 	bl	800194c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e187      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c76:	4b1b      	ldr	r3, [pc, #108]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1f0      	bne.n	8003c64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0308 	and.w	r3, r3, #8
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d036      	beq.n	8003cfc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c96:	4b15      	ldr	r3, [pc, #84]	; (8003cec <HAL_RCC_OscConfig+0x248>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd fe56 	bl	800194c <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd fe52 	bl	800194c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e167      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb6:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <HAL_RCC_OscConfig+0x240>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x200>
 8003cc2:	e01b      	b.n	8003cfc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b09      	ldr	r3, [pc, #36]	; (8003cec <HAL_RCC_OscConfig+0x248>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cca:	f7fd fe3f 	bl	800194c <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cd0:	e00e      	b.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd2:	f7fd fe3b 	bl	800194c <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d907      	bls.n	8003cf0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e150      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	42470000 	.word	0x42470000
 8003cec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cf0:	4b88      	ldr	r3, [pc, #544]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1ea      	bne.n	8003cd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8097 	beq.w	8003e38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d0e:	4b81      	ldr	r3, [pc, #516]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10f      	bne.n	8003d3a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]
 8003d1e:	4b7d      	ldr	r3, [pc, #500]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d22:	4a7c      	ldr	r2, [pc, #496]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d28:	6413      	str	r3, [r2, #64]	; 0x40
 8003d2a:	4b7a      	ldr	r3, [pc, #488]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d32:	60bb      	str	r3, [r7, #8]
 8003d34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d36:	2301      	movs	r3, #1
 8003d38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3a:	4b77      	ldr	r3, [pc, #476]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d118      	bne.n	8003d78 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d46:	4b74      	ldr	r3, [pc, #464]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a73      	ldr	r2, [pc, #460]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d52:	f7fd fdfb 	bl	800194c <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d5a:	f7fd fdf7 	bl	800194c <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e10c      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d6c:	4b6a      	ldr	r3, [pc, #424]	; (8003f18 <HAL_RCC_OscConfig+0x474>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0f0      	beq.n	8003d5a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x2ea>
 8003d80:	4b64      	ldr	r3, [pc, #400]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d84:	4a63      	ldr	r2, [pc, #396]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d86:	f043 0301 	orr.w	r3, r3, #1
 8003d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8c:	e01c      	b.n	8003dc8 <HAL_RCC_OscConfig+0x324>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x30c>
 8003d96:	4b5f      	ldr	r3, [pc, #380]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d9a:	4a5e      	ldr	r2, [pc, #376]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0304 	orr.w	r3, r3, #4
 8003da0:	6713      	str	r3, [r2, #112]	; 0x70
 8003da2:	4b5c      	ldr	r3, [pc, #368]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da6:	4a5b      	ldr	r2, [pc, #364]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003da8:	f043 0301 	orr.w	r3, r3, #1
 8003dac:	6713      	str	r3, [r2, #112]	; 0x70
 8003dae:	e00b      	b.n	8003dc8 <HAL_RCC_OscConfig+0x324>
 8003db0:	4b58      	ldr	r3, [pc, #352]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db4:	4a57      	ldr	r2, [pc, #348]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	6713      	str	r3, [r2, #112]	; 0x70
 8003dbc:	4b55      	ldr	r3, [pc, #340]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	4a54      	ldr	r2, [pc, #336]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003dc2:	f023 0304 	bic.w	r3, r3, #4
 8003dc6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd fdbc 	bl	800194c <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd fdb8 	bl	800194c <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0cb      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dee:	4b49      	ldr	r3, [pc, #292]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0ee      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x334>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfc:	f7fd fda6 	bl	800194c <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fd fda2 	bl	800194c <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0b5      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e1a:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ee      	bne.n	8003e04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e26:	7dfb      	ldrb	r3, [r7, #23]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d105      	bne.n	8003e38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e2c:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e30:	4a38      	ldr	r2, [pc, #224]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80a1 	beq.w	8003f84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e42:	4b34      	ldr	r3, [pc, #208]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f003 030c 	and.w	r3, r3, #12
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	d05c      	beq.n	8003f08 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d141      	bne.n	8003eda <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e56:	4b31      	ldr	r3, [pc, #196]	; (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003e58:	2200      	movs	r2, #0
 8003e5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fd fd76 	bl	800194c <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e64:	f7fd fd72 	bl	800194c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e087      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e76:	4b27      	ldr	r3, [pc, #156]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	69da      	ldr	r2, [r3, #28]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	019b      	lsls	r3, r3, #6
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e98:	085b      	lsrs	r3, r3, #1
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	061b      	lsls	r3, r3, #24
 8003ea6:	491b      	ldr	r1, [pc, #108]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003eac:	4b1b      	ldr	r3, [pc, #108]	; (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7fd fd4b 	bl	800194c <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eba:	f7fd fd47 	bl	800194c <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e05c      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ecc:	4b11      	ldr	r3, [pc, #68]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x416>
 8003ed8:	e054      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <HAL_RCC_OscConfig+0x478>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee0:	f7fd fd34 	bl	800194c <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee8:	f7fd fd30 	bl	800194c <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e045      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003efa:	4b06      	ldr	r3, [pc, #24]	; (8003f14 <HAL_RCC_OscConfig+0x470>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x444>
 8003f06:	e03d      	b.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d107      	bne.n	8003f20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e038      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	40007000 	.word	0x40007000
 8003f1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f20:	4b1b      	ldr	r3, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x4ec>)
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d028      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d121      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d11a      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f50:	4013      	ands	r3, r2
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d111      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f66:	085b      	lsrs	r3, r3, #1
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d107      	bne.n	8003f80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e000      	b.n	8003f86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800

08003f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0cc      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fa8:	4b68      	ldr	r3, [pc, #416]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0307 	and.w	r3, r3, #7
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d90c      	bls.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb6:	4b65      	ldr	r3, [pc, #404]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fbe:	4b63      	ldr	r3, [pc, #396]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0b8      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0302 	and.w	r3, r3, #2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d020      	beq.n	800401e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d005      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fe8:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ff2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004000:	4b53      	ldr	r3, [pc, #332]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	4a52      	ldr	r2, [pc, #328]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004006:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800400a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800400c:	4b50      	ldr	r3, [pc, #320]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	494d      	ldr	r1, [pc, #308]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d044      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d107      	bne.n	8004042 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	4b47      	ldr	r3, [pc, #284]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800403a:	2b00      	cmp	r3, #0
 800403c:	d119      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b02      	cmp	r3, #2
 8004048:	d003      	beq.n	8004052 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800404e:	2b03      	cmp	r3, #3
 8004050:	d107      	bne.n	8004062 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004052:	4b3f      	ldr	r3, [pc, #252]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d109      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e06f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004062:	4b3b      	ldr	r3, [pc, #236]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d101      	bne.n	8004072 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e067      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004072:	4b37      	ldr	r3, [pc, #220]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f023 0203 	bic.w	r2, r3, #3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	4934      	ldr	r1, [pc, #208]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004084:	f7fd fc62 	bl	800194c <HAL_GetTick>
 8004088:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408a:	e00a      	b.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800408c:	f7fd fc5e 	bl	800194c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	f241 3288 	movw	r2, #5000	; 0x1388
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e04f      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040a2:	4b2b      	ldr	r3, [pc, #172]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 020c 	and.w	r2, r3, #12
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d1eb      	bne.n	800408c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040b4:	4b25      	ldr	r3, [pc, #148]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	683a      	ldr	r2, [r7, #0]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d20c      	bcs.n	80040dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c2:	4b22      	ldr	r3, [pc, #136]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ca:	4b20      	ldr	r3, [pc, #128]	; (800414c <HAL_RCC_ClockConfig+0x1b8>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	683a      	ldr	r2, [r7, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d001      	beq.n	80040dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e032      	b.n	8004142 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040e8:	4b19      	ldr	r3, [pc, #100]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	4916      	ldr	r1, [pc, #88]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0308 	and.w	r3, r3, #8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004106:	4b12      	ldr	r3, [pc, #72]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	691b      	ldr	r3, [r3, #16]
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	490e      	ldr	r1, [pc, #56]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	4313      	orrs	r3, r2
 8004118:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800411a:	f000 f821 	bl	8004160 <HAL_RCC_GetSysClockFreq>
 800411e:	4602      	mov	r2, r0
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	490a      	ldr	r1, [pc, #40]	; (8004154 <HAL_RCC_ClockConfig+0x1c0>)
 800412c:	5ccb      	ldrb	r3, [r1, r3]
 800412e:	fa22 f303 	lsr.w	r3, r2, r3
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <HAL_RCC_ClockConfig+0x1c4>)
 8004134:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004136:	4b09      	ldr	r3, [pc, #36]	; (800415c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4618      	mov	r0, r3
 800413c:	f7fd fbc2 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	40023c00 	.word	0x40023c00
 8004150:	40023800 	.word	0x40023800
 8004154:	08004d20 	.word	0x08004d20
 8004158:	20000000 	.word	0x20000000
 800415c:	20000004 	.word	0x20000004

08004160 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b094      	sub	sp, #80	; 0x50
 8004166:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	647b      	str	r3, [r7, #68]	; 0x44
 800416c:	2300      	movs	r3, #0
 800416e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004170:	2300      	movs	r3, #0
 8004172:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004178:	4b79      	ldr	r3, [pc, #484]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 030c 	and.w	r3, r3, #12
 8004180:	2b08      	cmp	r3, #8
 8004182:	d00d      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004184:	2b08      	cmp	r3, #8
 8004186:	f200 80e1 	bhi.w	800434c <HAL_RCC_GetSysClockFreq+0x1ec>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d002      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x34>
 800418e:	2b04      	cmp	r3, #4
 8004190:	d003      	beq.n	800419a <HAL_RCC_GetSysClockFreq+0x3a>
 8004192:	e0db      	b.n	800434c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004194:	4b73      	ldr	r3, [pc, #460]	; (8004364 <HAL_RCC_GetSysClockFreq+0x204>)
 8004196:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004198:	e0db      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800419a:	4b73      	ldr	r3, [pc, #460]	; (8004368 <HAL_RCC_GetSysClockFreq+0x208>)
 800419c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800419e:	e0d8      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041a0:	4b6f      	ldr	r3, [pc, #444]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041aa:	4b6d      	ldr	r3, [pc, #436]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d063      	beq.n	800427e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041b6:	4b6a      	ldr	r3, [pc, #424]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	099b      	lsrs	r3, r3, #6
 80041bc:	2200      	movs	r2, #0
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38
 80041c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80041c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c8:	633b      	str	r3, [r7, #48]	; 0x30
 80041ca:	2300      	movs	r3, #0
 80041cc:	637b      	str	r3, [r7, #52]	; 0x34
 80041ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80041d2:	4622      	mov	r2, r4
 80041d4:	462b      	mov	r3, r5
 80041d6:	f04f 0000 	mov.w	r0, #0
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	0159      	lsls	r1, r3, #5
 80041e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041e4:	0150      	lsls	r0, r2, #5
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4621      	mov	r1, r4
 80041ec:	1a51      	subs	r1, r2, r1
 80041ee:	6139      	str	r1, [r7, #16]
 80041f0:	4629      	mov	r1, r5
 80041f2:	eb63 0301 	sbc.w	r3, r3, r1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004204:	4659      	mov	r1, fp
 8004206:	018b      	lsls	r3, r1, #6
 8004208:	4651      	mov	r1, sl
 800420a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800420e:	4651      	mov	r1, sl
 8004210:	018a      	lsls	r2, r1, #6
 8004212:	4651      	mov	r1, sl
 8004214:	ebb2 0801 	subs.w	r8, r2, r1
 8004218:	4659      	mov	r1, fp
 800421a:	eb63 0901 	sbc.w	r9, r3, r1
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	f04f 0300 	mov.w	r3, #0
 8004226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800422a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800422e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004232:	4690      	mov	r8, r2
 8004234:	4699      	mov	r9, r3
 8004236:	4623      	mov	r3, r4
 8004238:	eb18 0303 	adds.w	r3, r8, r3
 800423c:	60bb      	str	r3, [r7, #8]
 800423e:	462b      	mov	r3, r5
 8004240:	eb49 0303 	adc.w	r3, r9, r3
 8004244:	60fb      	str	r3, [r7, #12]
 8004246:	f04f 0200 	mov.w	r2, #0
 800424a:	f04f 0300 	mov.w	r3, #0
 800424e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004252:	4629      	mov	r1, r5
 8004254:	024b      	lsls	r3, r1, #9
 8004256:	4621      	mov	r1, r4
 8004258:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800425c:	4621      	mov	r1, r4
 800425e:	024a      	lsls	r2, r1, #9
 8004260:	4610      	mov	r0, r2
 8004262:	4619      	mov	r1, r3
 8004264:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004266:	2200      	movs	r2, #0
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
 800426a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800426c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004270:	f7fc fc1c 	bl	8000aac <__aeabi_uldivmod>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4613      	mov	r3, r2
 800427a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800427c:	e058      	b.n	8004330 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b38      	ldr	r3, [pc, #224]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	4618      	mov	r0, r3
 8004288:	4611      	mov	r1, r2
 800428a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800428e:	623b      	str	r3, [r7, #32]
 8004290:	2300      	movs	r3, #0
 8004292:	627b      	str	r3, [r7, #36]	; 0x24
 8004294:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004298:	4642      	mov	r2, r8
 800429a:	464b      	mov	r3, r9
 800429c:	f04f 0000 	mov.w	r0, #0
 80042a0:	f04f 0100 	mov.w	r1, #0
 80042a4:	0159      	lsls	r1, r3, #5
 80042a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042aa:	0150      	lsls	r0, r2, #5
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4641      	mov	r1, r8
 80042b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042d0:	ebb2 040a 	subs.w	r4, r2, sl
 80042d4:	eb63 050b 	sbc.w	r5, r3, fp
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	00eb      	lsls	r3, r5, #3
 80042e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e6:	00e2      	lsls	r2, r4, #3
 80042e8:	4614      	mov	r4, r2
 80042ea:	461d      	mov	r5, r3
 80042ec:	4643      	mov	r3, r8
 80042ee:	18e3      	adds	r3, r4, r3
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	464b      	mov	r3, r9
 80042f4:	eb45 0303 	adc.w	r3, r5, r3
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	2200      	movs	r2, #0
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	61fa      	str	r2, [r7, #28]
 8004320:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004324:	f7fc fbc2 	bl	8000aac <__aeabi_uldivmod>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4613      	mov	r3, r2
 800432e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004330:	4b0b      	ldr	r3, [pc, #44]	; (8004360 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	3301      	adds	r3, #1
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004340:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800434a:	e002      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800434c:	4b05      	ldr	r3, [pc, #20]	; (8004364 <HAL_RCC_GetSysClockFreq+0x204>)
 800434e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004350:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004354:	4618      	mov	r0, r3
 8004356:	3750      	adds	r7, #80	; 0x50
 8004358:	46bd      	mov	sp, r7
 800435a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800435e:	bf00      	nop
 8004360:	40023800 	.word	0x40023800
 8004364:	00f42400 	.word	0x00f42400
 8004368:	007a1200 	.word	0x007a1200

0800436c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800436c:	b480      	push	{r7}
 800436e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <HAL_RCC_GetHCLKFreq+0x14>)
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	46bd      	mov	sp, r7
 8004378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437c:	4770      	bx	lr
 800437e:	bf00      	nop
 8004380:	20000000 	.word	0x20000000

08004384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004388:	f7ff fff0 	bl	800436c <HAL_RCC_GetHCLKFreq>
 800438c:	4602      	mov	r2, r0
 800438e:	4b05      	ldr	r3, [pc, #20]	; (80043a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	f003 0307 	and.w	r3, r3, #7
 8004398:	4903      	ldr	r1, [pc, #12]	; (80043a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800439a:	5ccb      	ldrb	r3, [r1, r3]
 800439c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40023800 	.word	0x40023800
 80043a8:	08004d30 	.word	0x08004d30

080043ac <siprintf>:
 80043ac:	b40e      	push	{r1, r2, r3}
 80043ae:	b500      	push	{lr}
 80043b0:	b09c      	sub	sp, #112	; 0x70
 80043b2:	ab1d      	add	r3, sp, #116	; 0x74
 80043b4:	9002      	str	r0, [sp, #8]
 80043b6:	9006      	str	r0, [sp, #24]
 80043b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80043bc:	4809      	ldr	r0, [pc, #36]	; (80043e4 <siprintf+0x38>)
 80043be:	9107      	str	r1, [sp, #28]
 80043c0:	9104      	str	r1, [sp, #16]
 80043c2:	4909      	ldr	r1, [pc, #36]	; (80043e8 <siprintf+0x3c>)
 80043c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c8:	9105      	str	r1, [sp, #20]
 80043ca:	6800      	ldr	r0, [r0, #0]
 80043cc:	9301      	str	r3, [sp, #4]
 80043ce:	a902      	add	r1, sp, #8
 80043d0:	f000 f992 	bl	80046f8 <_svfiprintf_r>
 80043d4:	9b02      	ldr	r3, [sp, #8]
 80043d6:	2200      	movs	r2, #0
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	b01c      	add	sp, #112	; 0x70
 80043dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80043e0:	b003      	add	sp, #12
 80043e2:	4770      	bx	lr
 80043e4:	20000058 	.word	0x20000058
 80043e8:	ffff0208 	.word	0xffff0208

080043ec <memset>:
 80043ec:	4402      	add	r2, r0
 80043ee:	4603      	mov	r3, r0
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d100      	bne.n	80043f6 <memset+0xa>
 80043f4:	4770      	bx	lr
 80043f6:	f803 1b01 	strb.w	r1, [r3], #1
 80043fa:	e7f9      	b.n	80043f0 <memset+0x4>

080043fc <__errno>:
 80043fc:	4b01      	ldr	r3, [pc, #4]	; (8004404 <__errno+0x8>)
 80043fe:	6818      	ldr	r0, [r3, #0]
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	20000058 	.word	0x20000058

08004408 <__libc_init_array>:
 8004408:	b570      	push	{r4, r5, r6, lr}
 800440a:	4d0d      	ldr	r5, [pc, #52]	; (8004440 <__libc_init_array+0x38>)
 800440c:	4c0d      	ldr	r4, [pc, #52]	; (8004444 <__libc_init_array+0x3c>)
 800440e:	1b64      	subs	r4, r4, r5
 8004410:	10a4      	asrs	r4, r4, #2
 8004412:	2600      	movs	r6, #0
 8004414:	42a6      	cmp	r6, r4
 8004416:	d109      	bne.n	800442c <__libc_init_array+0x24>
 8004418:	4d0b      	ldr	r5, [pc, #44]	; (8004448 <__libc_init_array+0x40>)
 800441a:	4c0c      	ldr	r4, [pc, #48]	; (800444c <__libc_init_array+0x44>)
 800441c:	f000 fc6a 	bl	8004cf4 <_init>
 8004420:	1b64      	subs	r4, r4, r5
 8004422:	10a4      	asrs	r4, r4, #2
 8004424:	2600      	movs	r6, #0
 8004426:	42a6      	cmp	r6, r4
 8004428:	d105      	bne.n	8004436 <__libc_init_array+0x2e>
 800442a:	bd70      	pop	{r4, r5, r6, pc}
 800442c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004430:	4798      	blx	r3
 8004432:	3601      	adds	r6, #1
 8004434:	e7ee      	b.n	8004414 <__libc_init_array+0xc>
 8004436:	f855 3b04 	ldr.w	r3, [r5], #4
 800443a:	4798      	blx	r3
 800443c:	3601      	adds	r6, #1
 800443e:	e7f2      	b.n	8004426 <__libc_init_array+0x1e>
 8004440:	08004d74 	.word	0x08004d74
 8004444:	08004d74 	.word	0x08004d74
 8004448:	08004d74 	.word	0x08004d74
 800444c:	08004d78 	.word	0x08004d78

08004450 <__retarget_lock_acquire_recursive>:
 8004450:	4770      	bx	lr

08004452 <__retarget_lock_release_recursive>:
 8004452:	4770      	bx	lr

08004454 <_free_r>:
 8004454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004456:	2900      	cmp	r1, #0
 8004458:	d044      	beq.n	80044e4 <_free_r+0x90>
 800445a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800445e:	9001      	str	r0, [sp, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f1a1 0404 	sub.w	r4, r1, #4
 8004466:	bfb8      	it	lt
 8004468:	18e4      	addlt	r4, r4, r3
 800446a:	f000 f8df 	bl	800462c <__malloc_lock>
 800446e:	4a1e      	ldr	r2, [pc, #120]	; (80044e8 <_free_r+0x94>)
 8004470:	9801      	ldr	r0, [sp, #4]
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	b933      	cbnz	r3, 8004484 <_free_r+0x30>
 8004476:	6063      	str	r3, [r4, #4]
 8004478:	6014      	str	r4, [r2, #0]
 800447a:	b003      	add	sp, #12
 800447c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004480:	f000 b8da 	b.w	8004638 <__malloc_unlock>
 8004484:	42a3      	cmp	r3, r4
 8004486:	d908      	bls.n	800449a <_free_r+0x46>
 8004488:	6825      	ldr	r5, [r4, #0]
 800448a:	1961      	adds	r1, r4, r5
 800448c:	428b      	cmp	r3, r1
 800448e:	bf01      	itttt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	1949      	addeq	r1, r1, r5
 8004496:	6021      	streq	r1, [r4, #0]
 8004498:	e7ed      	b.n	8004476 <_free_r+0x22>
 800449a:	461a      	mov	r2, r3
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b10b      	cbz	r3, 80044a4 <_free_r+0x50>
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d9fa      	bls.n	800449a <_free_r+0x46>
 80044a4:	6811      	ldr	r1, [r2, #0]
 80044a6:	1855      	adds	r5, r2, r1
 80044a8:	42a5      	cmp	r5, r4
 80044aa:	d10b      	bne.n	80044c4 <_free_r+0x70>
 80044ac:	6824      	ldr	r4, [r4, #0]
 80044ae:	4421      	add	r1, r4
 80044b0:	1854      	adds	r4, r2, r1
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	6011      	str	r1, [r2, #0]
 80044b6:	d1e0      	bne.n	800447a <_free_r+0x26>
 80044b8:	681c      	ldr	r4, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	6053      	str	r3, [r2, #4]
 80044be:	440c      	add	r4, r1
 80044c0:	6014      	str	r4, [r2, #0]
 80044c2:	e7da      	b.n	800447a <_free_r+0x26>
 80044c4:	d902      	bls.n	80044cc <_free_r+0x78>
 80044c6:	230c      	movs	r3, #12
 80044c8:	6003      	str	r3, [r0, #0]
 80044ca:	e7d6      	b.n	800447a <_free_r+0x26>
 80044cc:	6825      	ldr	r5, [r4, #0]
 80044ce:	1961      	adds	r1, r4, r5
 80044d0:	428b      	cmp	r3, r1
 80044d2:	bf04      	itt	eq
 80044d4:	6819      	ldreq	r1, [r3, #0]
 80044d6:	685b      	ldreq	r3, [r3, #4]
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	bf04      	itt	eq
 80044dc:	1949      	addeq	r1, r1, r5
 80044de:	6021      	streq	r1, [r4, #0]
 80044e0:	6054      	str	r4, [r2, #4]
 80044e2:	e7ca      	b.n	800447a <_free_r+0x26>
 80044e4:	b003      	add	sp, #12
 80044e6:	bd30      	pop	{r4, r5, pc}
 80044e8:	200002cc 	.word	0x200002cc

080044ec <sbrk_aligned>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4e0e      	ldr	r6, [pc, #56]	; (8004528 <sbrk_aligned+0x3c>)
 80044f0:	460c      	mov	r4, r1
 80044f2:	6831      	ldr	r1, [r6, #0]
 80044f4:	4605      	mov	r5, r0
 80044f6:	b911      	cbnz	r1, 80044fe <sbrk_aligned+0x12>
 80044f8:	f000 fba6 	bl	8004c48 <_sbrk_r>
 80044fc:	6030      	str	r0, [r6, #0]
 80044fe:	4621      	mov	r1, r4
 8004500:	4628      	mov	r0, r5
 8004502:	f000 fba1 	bl	8004c48 <_sbrk_r>
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	d00a      	beq.n	8004520 <sbrk_aligned+0x34>
 800450a:	1cc4      	adds	r4, r0, #3
 800450c:	f024 0403 	bic.w	r4, r4, #3
 8004510:	42a0      	cmp	r0, r4
 8004512:	d007      	beq.n	8004524 <sbrk_aligned+0x38>
 8004514:	1a21      	subs	r1, r4, r0
 8004516:	4628      	mov	r0, r5
 8004518:	f000 fb96 	bl	8004c48 <_sbrk_r>
 800451c:	3001      	adds	r0, #1
 800451e:	d101      	bne.n	8004524 <sbrk_aligned+0x38>
 8004520:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004524:	4620      	mov	r0, r4
 8004526:	bd70      	pop	{r4, r5, r6, pc}
 8004528:	200002d0 	.word	0x200002d0

0800452c <_malloc_r>:
 800452c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004530:	1ccd      	adds	r5, r1, #3
 8004532:	f025 0503 	bic.w	r5, r5, #3
 8004536:	3508      	adds	r5, #8
 8004538:	2d0c      	cmp	r5, #12
 800453a:	bf38      	it	cc
 800453c:	250c      	movcc	r5, #12
 800453e:	2d00      	cmp	r5, #0
 8004540:	4607      	mov	r7, r0
 8004542:	db01      	blt.n	8004548 <_malloc_r+0x1c>
 8004544:	42a9      	cmp	r1, r5
 8004546:	d905      	bls.n	8004554 <_malloc_r+0x28>
 8004548:	230c      	movs	r3, #12
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	2600      	movs	r6, #0
 800454e:	4630      	mov	r0, r6
 8004550:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004554:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004628 <_malloc_r+0xfc>
 8004558:	f000 f868 	bl	800462c <__malloc_lock>
 800455c:	f8d8 3000 	ldr.w	r3, [r8]
 8004560:	461c      	mov	r4, r3
 8004562:	bb5c      	cbnz	r4, 80045bc <_malloc_r+0x90>
 8004564:	4629      	mov	r1, r5
 8004566:	4638      	mov	r0, r7
 8004568:	f7ff ffc0 	bl	80044ec <sbrk_aligned>
 800456c:	1c43      	adds	r3, r0, #1
 800456e:	4604      	mov	r4, r0
 8004570:	d155      	bne.n	800461e <_malloc_r+0xf2>
 8004572:	f8d8 4000 	ldr.w	r4, [r8]
 8004576:	4626      	mov	r6, r4
 8004578:	2e00      	cmp	r6, #0
 800457a:	d145      	bne.n	8004608 <_malloc_r+0xdc>
 800457c:	2c00      	cmp	r4, #0
 800457e:	d048      	beq.n	8004612 <_malloc_r+0xe6>
 8004580:	6823      	ldr	r3, [r4, #0]
 8004582:	4631      	mov	r1, r6
 8004584:	4638      	mov	r0, r7
 8004586:	eb04 0903 	add.w	r9, r4, r3
 800458a:	f000 fb5d 	bl	8004c48 <_sbrk_r>
 800458e:	4581      	cmp	r9, r0
 8004590:	d13f      	bne.n	8004612 <_malloc_r+0xe6>
 8004592:	6821      	ldr	r1, [r4, #0]
 8004594:	1a6d      	subs	r5, r5, r1
 8004596:	4629      	mov	r1, r5
 8004598:	4638      	mov	r0, r7
 800459a:	f7ff ffa7 	bl	80044ec <sbrk_aligned>
 800459e:	3001      	adds	r0, #1
 80045a0:	d037      	beq.n	8004612 <_malloc_r+0xe6>
 80045a2:	6823      	ldr	r3, [r4, #0]
 80045a4:	442b      	add	r3, r5
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	f8d8 3000 	ldr.w	r3, [r8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d038      	beq.n	8004622 <_malloc_r+0xf6>
 80045b0:	685a      	ldr	r2, [r3, #4]
 80045b2:	42a2      	cmp	r2, r4
 80045b4:	d12b      	bne.n	800460e <_malloc_r+0xe2>
 80045b6:	2200      	movs	r2, #0
 80045b8:	605a      	str	r2, [r3, #4]
 80045ba:	e00f      	b.n	80045dc <_malloc_r+0xb0>
 80045bc:	6822      	ldr	r2, [r4, #0]
 80045be:	1b52      	subs	r2, r2, r5
 80045c0:	d41f      	bmi.n	8004602 <_malloc_r+0xd6>
 80045c2:	2a0b      	cmp	r2, #11
 80045c4:	d917      	bls.n	80045f6 <_malloc_r+0xca>
 80045c6:	1961      	adds	r1, r4, r5
 80045c8:	42a3      	cmp	r3, r4
 80045ca:	6025      	str	r5, [r4, #0]
 80045cc:	bf18      	it	ne
 80045ce:	6059      	strne	r1, [r3, #4]
 80045d0:	6863      	ldr	r3, [r4, #4]
 80045d2:	bf08      	it	eq
 80045d4:	f8c8 1000 	streq.w	r1, [r8]
 80045d8:	5162      	str	r2, [r4, r5]
 80045da:	604b      	str	r3, [r1, #4]
 80045dc:	4638      	mov	r0, r7
 80045de:	f104 060b 	add.w	r6, r4, #11
 80045e2:	f000 f829 	bl	8004638 <__malloc_unlock>
 80045e6:	f026 0607 	bic.w	r6, r6, #7
 80045ea:	1d23      	adds	r3, r4, #4
 80045ec:	1af2      	subs	r2, r6, r3
 80045ee:	d0ae      	beq.n	800454e <_malloc_r+0x22>
 80045f0:	1b9b      	subs	r3, r3, r6
 80045f2:	50a3      	str	r3, [r4, r2]
 80045f4:	e7ab      	b.n	800454e <_malloc_r+0x22>
 80045f6:	42a3      	cmp	r3, r4
 80045f8:	6862      	ldr	r2, [r4, #4]
 80045fa:	d1dd      	bne.n	80045b8 <_malloc_r+0x8c>
 80045fc:	f8c8 2000 	str.w	r2, [r8]
 8004600:	e7ec      	b.n	80045dc <_malloc_r+0xb0>
 8004602:	4623      	mov	r3, r4
 8004604:	6864      	ldr	r4, [r4, #4]
 8004606:	e7ac      	b.n	8004562 <_malloc_r+0x36>
 8004608:	4634      	mov	r4, r6
 800460a:	6876      	ldr	r6, [r6, #4]
 800460c:	e7b4      	b.n	8004578 <_malloc_r+0x4c>
 800460e:	4613      	mov	r3, r2
 8004610:	e7cc      	b.n	80045ac <_malloc_r+0x80>
 8004612:	230c      	movs	r3, #12
 8004614:	603b      	str	r3, [r7, #0]
 8004616:	4638      	mov	r0, r7
 8004618:	f000 f80e 	bl	8004638 <__malloc_unlock>
 800461c:	e797      	b.n	800454e <_malloc_r+0x22>
 800461e:	6025      	str	r5, [r4, #0]
 8004620:	e7dc      	b.n	80045dc <_malloc_r+0xb0>
 8004622:	605b      	str	r3, [r3, #4]
 8004624:	deff      	udf	#255	; 0xff
 8004626:	bf00      	nop
 8004628:	200002cc 	.word	0x200002cc

0800462c <__malloc_lock>:
 800462c:	4801      	ldr	r0, [pc, #4]	; (8004634 <__malloc_lock+0x8>)
 800462e:	f7ff bf0f 	b.w	8004450 <__retarget_lock_acquire_recursive>
 8004632:	bf00      	nop
 8004634:	200002c8 	.word	0x200002c8

08004638 <__malloc_unlock>:
 8004638:	4801      	ldr	r0, [pc, #4]	; (8004640 <__malloc_unlock+0x8>)
 800463a:	f7ff bf0a 	b.w	8004452 <__retarget_lock_release_recursive>
 800463e:	bf00      	nop
 8004640:	200002c8 	.word	0x200002c8

08004644 <__ssputs_r>:
 8004644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004648:	688e      	ldr	r6, [r1, #8]
 800464a:	461f      	mov	r7, r3
 800464c:	42be      	cmp	r6, r7
 800464e:	680b      	ldr	r3, [r1, #0]
 8004650:	4682      	mov	sl, r0
 8004652:	460c      	mov	r4, r1
 8004654:	4690      	mov	r8, r2
 8004656:	d82c      	bhi.n	80046b2 <__ssputs_r+0x6e>
 8004658:	898a      	ldrh	r2, [r1, #12]
 800465a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800465e:	d026      	beq.n	80046ae <__ssputs_r+0x6a>
 8004660:	6965      	ldr	r5, [r4, #20]
 8004662:	6909      	ldr	r1, [r1, #16]
 8004664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004668:	eba3 0901 	sub.w	r9, r3, r1
 800466c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004670:	1c7b      	adds	r3, r7, #1
 8004672:	444b      	add	r3, r9
 8004674:	106d      	asrs	r5, r5, #1
 8004676:	429d      	cmp	r5, r3
 8004678:	bf38      	it	cc
 800467a:	461d      	movcc	r5, r3
 800467c:	0553      	lsls	r3, r2, #21
 800467e:	d527      	bpl.n	80046d0 <__ssputs_r+0x8c>
 8004680:	4629      	mov	r1, r5
 8004682:	f7ff ff53 	bl	800452c <_malloc_r>
 8004686:	4606      	mov	r6, r0
 8004688:	b360      	cbz	r0, 80046e4 <__ssputs_r+0xa0>
 800468a:	6921      	ldr	r1, [r4, #16]
 800468c:	464a      	mov	r2, r9
 800468e:	f000 faeb 	bl	8004c68 <memcpy>
 8004692:	89a3      	ldrh	r3, [r4, #12]
 8004694:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004698:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800469c:	81a3      	strh	r3, [r4, #12]
 800469e:	6126      	str	r6, [r4, #16]
 80046a0:	6165      	str	r5, [r4, #20]
 80046a2:	444e      	add	r6, r9
 80046a4:	eba5 0509 	sub.w	r5, r5, r9
 80046a8:	6026      	str	r6, [r4, #0]
 80046aa:	60a5      	str	r5, [r4, #8]
 80046ac:	463e      	mov	r6, r7
 80046ae:	42be      	cmp	r6, r7
 80046b0:	d900      	bls.n	80046b4 <__ssputs_r+0x70>
 80046b2:	463e      	mov	r6, r7
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	4632      	mov	r2, r6
 80046b8:	4641      	mov	r1, r8
 80046ba:	f000 faab 	bl	8004c14 <memmove>
 80046be:	68a3      	ldr	r3, [r4, #8]
 80046c0:	1b9b      	subs	r3, r3, r6
 80046c2:	60a3      	str	r3, [r4, #8]
 80046c4:	6823      	ldr	r3, [r4, #0]
 80046c6:	4433      	add	r3, r6
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	2000      	movs	r0, #0
 80046cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046d0:	462a      	mov	r2, r5
 80046d2:	f000 fad7 	bl	8004c84 <_realloc_r>
 80046d6:	4606      	mov	r6, r0
 80046d8:	2800      	cmp	r0, #0
 80046da:	d1e0      	bne.n	800469e <__ssputs_r+0x5a>
 80046dc:	6921      	ldr	r1, [r4, #16]
 80046de:	4650      	mov	r0, sl
 80046e0:	f7ff feb8 	bl	8004454 <_free_r>
 80046e4:	230c      	movs	r3, #12
 80046e6:	f8ca 3000 	str.w	r3, [sl]
 80046ea:	89a3      	ldrh	r3, [r4, #12]
 80046ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046f6:	e7e9      	b.n	80046cc <__ssputs_r+0x88>

080046f8 <_svfiprintf_r>:
 80046f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fc:	4698      	mov	r8, r3
 80046fe:	898b      	ldrh	r3, [r1, #12]
 8004700:	061b      	lsls	r3, r3, #24
 8004702:	b09d      	sub	sp, #116	; 0x74
 8004704:	4607      	mov	r7, r0
 8004706:	460d      	mov	r5, r1
 8004708:	4614      	mov	r4, r2
 800470a:	d50e      	bpl.n	800472a <_svfiprintf_r+0x32>
 800470c:	690b      	ldr	r3, [r1, #16]
 800470e:	b963      	cbnz	r3, 800472a <_svfiprintf_r+0x32>
 8004710:	2140      	movs	r1, #64	; 0x40
 8004712:	f7ff ff0b 	bl	800452c <_malloc_r>
 8004716:	6028      	str	r0, [r5, #0]
 8004718:	6128      	str	r0, [r5, #16]
 800471a:	b920      	cbnz	r0, 8004726 <_svfiprintf_r+0x2e>
 800471c:	230c      	movs	r3, #12
 800471e:	603b      	str	r3, [r7, #0]
 8004720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004724:	e0d0      	b.n	80048c8 <_svfiprintf_r+0x1d0>
 8004726:	2340      	movs	r3, #64	; 0x40
 8004728:	616b      	str	r3, [r5, #20]
 800472a:	2300      	movs	r3, #0
 800472c:	9309      	str	r3, [sp, #36]	; 0x24
 800472e:	2320      	movs	r3, #32
 8004730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004734:	f8cd 800c 	str.w	r8, [sp, #12]
 8004738:	2330      	movs	r3, #48	; 0x30
 800473a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80048e0 <_svfiprintf_r+0x1e8>
 800473e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004742:	f04f 0901 	mov.w	r9, #1
 8004746:	4623      	mov	r3, r4
 8004748:	469a      	mov	sl, r3
 800474a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800474e:	b10a      	cbz	r2, 8004754 <_svfiprintf_r+0x5c>
 8004750:	2a25      	cmp	r2, #37	; 0x25
 8004752:	d1f9      	bne.n	8004748 <_svfiprintf_r+0x50>
 8004754:	ebba 0b04 	subs.w	fp, sl, r4
 8004758:	d00b      	beq.n	8004772 <_svfiprintf_r+0x7a>
 800475a:	465b      	mov	r3, fp
 800475c:	4622      	mov	r2, r4
 800475e:	4629      	mov	r1, r5
 8004760:	4638      	mov	r0, r7
 8004762:	f7ff ff6f 	bl	8004644 <__ssputs_r>
 8004766:	3001      	adds	r0, #1
 8004768:	f000 80a9 	beq.w	80048be <_svfiprintf_r+0x1c6>
 800476c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800476e:	445a      	add	r2, fp
 8004770:	9209      	str	r2, [sp, #36]	; 0x24
 8004772:	f89a 3000 	ldrb.w	r3, [sl]
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 80a1 	beq.w	80048be <_svfiprintf_r+0x1c6>
 800477c:	2300      	movs	r3, #0
 800477e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004786:	f10a 0a01 	add.w	sl, sl, #1
 800478a:	9304      	str	r3, [sp, #16]
 800478c:	9307      	str	r3, [sp, #28]
 800478e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004792:	931a      	str	r3, [sp, #104]	; 0x68
 8004794:	4654      	mov	r4, sl
 8004796:	2205      	movs	r2, #5
 8004798:	f814 1b01 	ldrb.w	r1, [r4], #1
 800479c:	4850      	ldr	r0, [pc, #320]	; (80048e0 <_svfiprintf_r+0x1e8>)
 800479e:	f7fb fd17 	bl	80001d0 <memchr>
 80047a2:	9a04      	ldr	r2, [sp, #16]
 80047a4:	b9d8      	cbnz	r0, 80047de <_svfiprintf_r+0xe6>
 80047a6:	06d0      	lsls	r0, r2, #27
 80047a8:	bf44      	itt	mi
 80047aa:	2320      	movmi	r3, #32
 80047ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047b0:	0711      	lsls	r1, r2, #28
 80047b2:	bf44      	itt	mi
 80047b4:	232b      	movmi	r3, #43	; 0x2b
 80047b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80047ba:	f89a 3000 	ldrb.w	r3, [sl]
 80047be:	2b2a      	cmp	r3, #42	; 0x2a
 80047c0:	d015      	beq.n	80047ee <_svfiprintf_r+0xf6>
 80047c2:	9a07      	ldr	r2, [sp, #28]
 80047c4:	4654      	mov	r4, sl
 80047c6:	2000      	movs	r0, #0
 80047c8:	f04f 0c0a 	mov.w	ip, #10
 80047cc:	4621      	mov	r1, r4
 80047ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047d2:	3b30      	subs	r3, #48	; 0x30
 80047d4:	2b09      	cmp	r3, #9
 80047d6:	d94d      	bls.n	8004874 <_svfiprintf_r+0x17c>
 80047d8:	b1b0      	cbz	r0, 8004808 <_svfiprintf_r+0x110>
 80047da:	9207      	str	r2, [sp, #28]
 80047dc:	e014      	b.n	8004808 <_svfiprintf_r+0x110>
 80047de:	eba0 0308 	sub.w	r3, r0, r8
 80047e2:	fa09 f303 	lsl.w	r3, r9, r3
 80047e6:	4313      	orrs	r3, r2
 80047e8:	9304      	str	r3, [sp, #16]
 80047ea:	46a2      	mov	sl, r4
 80047ec:	e7d2      	b.n	8004794 <_svfiprintf_r+0x9c>
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	1d19      	adds	r1, r3, #4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	9103      	str	r1, [sp, #12]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	bfbb      	ittet	lt
 80047fa:	425b      	neglt	r3, r3
 80047fc:	f042 0202 	orrlt.w	r2, r2, #2
 8004800:	9307      	strge	r3, [sp, #28]
 8004802:	9307      	strlt	r3, [sp, #28]
 8004804:	bfb8      	it	lt
 8004806:	9204      	strlt	r2, [sp, #16]
 8004808:	7823      	ldrb	r3, [r4, #0]
 800480a:	2b2e      	cmp	r3, #46	; 0x2e
 800480c:	d10c      	bne.n	8004828 <_svfiprintf_r+0x130>
 800480e:	7863      	ldrb	r3, [r4, #1]
 8004810:	2b2a      	cmp	r3, #42	; 0x2a
 8004812:	d134      	bne.n	800487e <_svfiprintf_r+0x186>
 8004814:	9b03      	ldr	r3, [sp, #12]
 8004816:	1d1a      	adds	r2, r3, #4
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	9203      	str	r2, [sp, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	bfb8      	it	lt
 8004820:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004824:	3402      	adds	r4, #2
 8004826:	9305      	str	r3, [sp, #20]
 8004828:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80048f0 <_svfiprintf_r+0x1f8>
 800482c:	7821      	ldrb	r1, [r4, #0]
 800482e:	2203      	movs	r2, #3
 8004830:	4650      	mov	r0, sl
 8004832:	f7fb fccd 	bl	80001d0 <memchr>
 8004836:	b138      	cbz	r0, 8004848 <_svfiprintf_r+0x150>
 8004838:	9b04      	ldr	r3, [sp, #16]
 800483a:	eba0 000a 	sub.w	r0, r0, sl
 800483e:	2240      	movs	r2, #64	; 0x40
 8004840:	4082      	lsls	r2, r0
 8004842:	4313      	orrs	r3, r2
 8004844:	3401      	adds	r4, #1
 8004846:	9304      	str	r3, [sp, #16]
 8004848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800484c:	4825      	ldr	r0, [pc, #148]	; (80048e4 <_svfiprintf_r+0x1ec>)
 800484e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004852:	2206      	movs	r2, #6
 8004854:	f7fb fcbc 	bl	80001d0 <memchr>
 8004858:	2800      	cmp	r0, #0
 800485a:	d038      	beq.n	80048ce <_svfiprintf_r+0x1d6>
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <_svfiprintf_r+0x1f0>)
 800485e:	bb1b      	cbnz	r3, 80048a8 <_svfiprintf_r+0x1b0>
 8004860:	9b03      	ldr	r3, [sp, #12]
 8004862:	3307      	adds	r3, #7
 8004864:	f023 0307 	bic.w	r3, r3, #7
 8004868:	3308      	adds	r3, #8
 800486a:	9303      	str	r3, [sp, #12]
 800486c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800486e:	4433      	add	r3, r6
 8004870:	9309      	str	r3, [sp, #36]	; 0x24
 8004872:	e768      	b.n	8004746 <_svfiprintf_r+0x4e>
 8004874:	fb0c 3202 	mla	r2, ip, r2, r3
 8004878:	460c      	mov	r4, r1
 800487a:	2001      	movs	r0, #1
 800487c:	e7a6      	b.n	80047cc <_svfiprintf_r+0xd4>
 800487e:	2300      	movs	r3, #0
 8004880:	3401      	adds	r4, #1
 8004882:	9305      	str	r3, [sp, #20]
 8004884:	4619      	mov	r1, r3
 8004886:	f04f 0c0a 	mov.w	ip, #10
 800488a:	4620      	mov	r0, r4
 800488c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004890:	3a30      	subs	r2, #48	; 0x30
 8004892:	2a09      	cmp	r2, #9
 8004894:	d903      	bls.n	800489e <_svfiprintf_r+0x1a6>
 8004896:	2b00      	cmp	r3, #0
 8004898:	d0c6      	beq.n	8004828 <_svfiprintf_r+0x130>
 800489a:	9105      	str	r1, [sp, #20]
 800489c:	e7c4      	b.n	8004828 <_svfiprintf_r+0x130>
 800489e:	fb0c 2101 	mla	r1, ip, r1, r2
 80048a2:	4604      	mov	r4, r0
 80048a4:	2301      	movs	r3, #1
 80048a6:	e7f0      	b.n	800488a <_svfiprintf_r+0x192>
 80048a8:	ab03      	add	r3, sp, #12
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	462a      	mov	r2, r5
 80048ae:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <_svfiprintf_r+0x1f4>)
 80048b0:	a904      	add	r1, sp, #16
 80048b2:	4638      	mov	r0, r7
 80048b4:	f3af 8000 	nop.w
 80048b8:	1c42      	adds	r2, r0, #1
 80048ba:	4606      	mov	r6, r0
 80048bc:	d1d6      	bne.n	800486c <_svfiprintf_r+0x174>
 80048be:	89ab      	ldrh	r3, [r5, #12]
 80048c0:	065b      	lsls	r3, r3, #25
 80048c2:	f53f af2d 	bmi.w	8004720 <_svfiprintf_r+0x28>
 80048c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048c8:	b01d      	add	sp, #116	; 0x74
 80048ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048ce:	ab03      	add	r3, sp, #12
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	462a      	mov	r2, r5
 80048d4:	4b05      	ldr	r3, [pc, #20]	; (80048ec <_svfiprintf_r+0x1f4>)
 80048d6:	a904      	add	r1, sp, #16
 80048d8:	4638      	mov	r0, r7
 80048da:	f000 f879 	bl	80049d0 <_printf_i>
 80048de:	e7eb      	b.n	80048b8 <_svfiprintf_r+0x1c0>
 80048e0:	08004d38 	.word	0x08004d38
 80048e4:	08004d42 	.word	0x08004d42
 80048e8:	00000000 	.word	0x00000000
 80048ec:	08004645 	.word	0x08004645
 80048f0:	08004d3e 	.word	0x08004d3e

080048f4 <_printf_common>:
 80048f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f8:	4616      	mov	r6, r2
 80048fa:	4699      	mov	r9, r3
 80048fc:	688a      	ldr	r2, [r1, #8]
 80048fe:	690b      	ldr	r3, [r1, #16]
 8004900:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004904:	4293      	cmp	r3, r2
 8004906:	bfb8      	it	lt
 8004908:	4613      	movlt	r3, r2
 800490a:	6033      	str	r3, [r6, #0]
 800490c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004910:	4607      	mov	r7, r0
 8004912:	460c      	mov	r4, r1
 8004914:	b10a      	cbz	r2, 800491a <_printf_common+0x26>
 8004916:	3301      	adds	r3, #1
 8004918:	6033      	str	r3, [r6, #0]
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	0699      	lsls	r1, r3, #26
 800491e:	bf42      	ittt	mi
 8004920:	6833      	ldrmi	r3, [r6, #0]
 8004922:	3302      	addmi	r3, #2
 8004924:	6033      	strmi	r3, [r6, #0]
 8004926:	6825      	ldr	r5, [r4, #0]
 8004928:	f015 0506 	ands.w	r5, r5, #6
 800492c:	d106      	bne.n	800493c <_printf_common+0x48>
 800492e:	f104 0a19 	add.w	sl, r4, #25
 8004932:	68e3      	ldr	r3, [r4, #12]
 8004934:	6832      	ldr	r2, [r6, #0]
 8004936:	1a9b      	subs	r3, r3, r2
 8004938:	42ab      	cmp	r3, r5
 800493a:	dc26      	bgt.n	800498a <_printf_common+0x96>
 800493c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004940:	1e13      	subs	r3, r2, #0
 8004942:	6822      	ldr	r2, [r4, #0]
 8004944:	bf18      	it	ne
 8004946:	2301      	movne	r3, #1
 8004948:	0692      	lsls	r2, r2, #26
 800494a:	d42b      	bmi.n	80049a4 <_printf_common+0xb0>
 800494c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004950:	4649      	mov	r1, r9
 8004952:	4638      	mov	r0, r7
 8004954:	47c0      	blx	r8
 8004956:	3001      	adds	r0, #1
 8004958:	d01e      	beq.n	8004998 <_printf_common+0xa4>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	f003 0306 	and.w	r3, r3, #6
 8004962:	2b04      	cmp	r3, #4
 8004964:	bf02      	ittt	eq
 8004966:	68e5      	ldreq	r5, [r4, #12]
 8004968:	6833      	ldreq	r3, [r6, #0]
 800496a:	1aed      	subeq	r5, r5, r3
 800496c:	68a3      	ldr	r3, [r4, #8]
 800496e:	bf0c      	ite	eq
 8004970:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004974:	2500      	movne	r5, #0
 8004976:	4293      	cmp	r3, r2
 8004978:	bfc4      	itt	gt
 800497a:	1a9b      	subgt	r3, r3, r2
 800497c:	18ed      	addgt	r5, r5, r3
 800497e:	2600      	movs	r6, #0
 8004980:	341a      	adds	r4, #26
 8004982:	42b5      	cmp	r5, r6
 8004984:	d11a      	bne.n	80049bc <_printf_common+0xc8>
 8004986:	2000      	movs	r0, #0
 8004988:	e008      	b.n	800499c <_printf_common+0xa8>
 800498a:	2301      	movs	r3, #1
 800498c:	4652      	mov	r2, sl
 800498e:	4649      	mov	r1, r9
 8004990:	4638      	mov	r0, r7
 8004992:	47c0      	blx	r8
 8004994:	3001      	adds	r0, #1
 8004996:	d103      	bne.n	80049a0 <_printf_common+0xac>
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800499c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a0:	3501      	adds	r5, #1
 80049a2:	e7c6      	b.n	8004932 <_printf_common+0x3e>
 80049a4:	18e1      	adds	r1, r4, r3
 80049a6:	1c5a      	adds	r2, r3, #1
 80049a8:	2030      	movs	r0, #48	; 0x30
 80049aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049ae:	4422      	add	r2, r4
 80049b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049b8:	3302      	adds	r3, #2
 80049ba:	e7c7      	b.n	800494c <_printf_common+0x58>
 80049bc:	2301      	movs	r3, #1
 80049be:	4622      	mov	r2, r4
 80049c0:	4649      	mov	r1, r9
 80049c2:	4638      	mov	r0, r7
 80049c4:	47c0      	blx	r8
 80049c6:	3001      	adds	r0, #1
 80049c8:	d0e6      	beq.n	8004998 <_printf_common+0xa4>
 80049ca:	3601      	adds	r6, #1
 80049cc:	e7d9      	b.n	8004982 <_printf_common+0x8e>
	...

080049d0 <_printf_i>:
 80049d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049d4:	7e0f      	ldrb	r7, [r1, #24]
 80049d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049d8:	2f78      	cmp	r7, #120	; 0x78
 80049da:	4691      	mov	r9, r2
 80049dc:	4680      	mov	r8, r0
 80049de:	460c      	mov	r4, r1
 80049e0:	469a      	mov	sl, r3
 80049e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049e6:	d807      	bhi.n	80049f8 <_printf_i+0x28>
 80049e8:	2f62      	cmp	r7, #98	; 0x62
 80049ea:	d80a      	bhi.n	8004a02 <_printf_i+0x32>
 80049ec:	2f00      	cmp	r7, #0
 80049ee:	f000 80d4 	beq.w	8004b9a <_printf_i+0x1ca>
 80049f2:	2f58      	cmp	r7, #88	; 0x58
 80049f4:	f000 80c0 	beq.w	8004b78 <_printf_i+0x1a8>
 80049f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004a00:	e03a      	b.n	8004a78 <_printf_i+0xa8>
 8004a02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004a06:	2b15      	cmp	r3, #21
 8004a08:	d8f6      	bhi.n	80049f8 <_printf_i+0x28>
 8004a0a:	a101      	add	r1, pc, #4	; (adr r1, 8004a10 <_printf_i+0x40>)
 8004a0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a10:	08004a69 	.word	0x08004a69
 8004a14:	08004a7d 	.word	0x08004a7d
 8004a18:	080049f9 	.word	0x080049f9
 8004a1c:	080049f9 	.word	0x080049f9
 8004a20:	080049f9 	.word	0x080049f9
 8004a24:	080049f9 	.word	0x080049f9
 8004a28:	08004a7d 	.word	0x08004a7d
 8004a2c:	080049f9 	.word	0x080049f9
 8004a30:	080049f9 	.word	0x080049f9
 8004a34:	080049f9 	.word	0x080049f9
 8004a38:	080049f9 	.word	0x080049f9
 8004a3c:	08004b81 	.word	0x08004b81
 8004a40:	08004aa9 	.word	0x08004aa9
 8004a44:	08004b3b 	.word	0x08004b3b
 8004a48:	080049f9 	.word	0x080049f9
 8004a4c:	080049f9 	.word	0x080049f9
 8004a50:	08004ba3 	.word	0x08004ba3
 8004a54:	080049f9 	.word	0x080049f9
 8004a58:	08004aa9 	.word	0x08004aa9
 8004a5c:	080049f9 	.word	0x080049f9
 8004a60:	080049f9 	.word	0x080049f9
 8004a64:	08004b43 	.word	0x08004b43
 8004a68:	682b      	ldr	r3, [r5, #0]
 8004a6a:	1d1a      	adds	r2, r3, #4
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	602a      	str	r2, [r5, #0]
 8004a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e09f      	b.n	8004bbc <_printf_i+0x1ec>
 8004a7c:	6820      	ldr	r0, [r4, #0]
 8004a7e:	682b      	ldr	r3, [r5, #0]
 8004a80:	0607      	lsls	r7, r0, #24
 8004a82:	f103 0104 	add.w	r1, r3, #4
 8004a86:	6029      	str	r1, [r5, #0]
 8004a88:	d501      	bpl.n	8004a8e <_printf_i+0xbe>
 8004a8a:	681e      	ldr	r6, [r3, #0]
 8004a8c:	e003      	b.n	8004a96 <_printf_i+0xc6>
 8004a8e:	0646      	lsls	r6, r0, #25
 8004a90:	d5fb      	bpl.n	8004a8a <_printf_i+0xba>
 8004a92:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a96:	2e00      	cmp	r6, #0
 8004a98:	da03      	bge.n	8004aa2 <_printf_i+0xd2>
 8004a9a:	232d      	movs	r3, #45	; 0x2d
 8004a9c:	4276      	negs	r6, r6
 8004a9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aa2:	485a      	ldr	r0, [pc, #360]	; (8004c0c <_printf_i+0x23c>)
 8004aa4:	230a      	movs	r3, #10
 8004aa6:	e012      	b.n	8004ace <_printf_i+0xfe>
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	6820      	ldr	r0, [r4, #0]
 8004aac:	1d19      	adds	r1, r3, #4
 8004aae:	6029      	str	r1, [r5, #0]
 8004ab0:	0605      	lsls	r5, r0, #24
 8004ab2:	d501      	bpl.n	8004ab8 <_printf_i+0xe8>
 8004ab4:	681e      	ldr	r6, [r3, #0]
 8004ab6:	e002      	b.n	8004abe <_printf_i+0xee>
 8004ab8:	0641      	lsls	r1, r0, #25
 8004aba:	d5fb      	bpl.n	8004ab4 <_printf_i+0xe4>
 8004abc:	881e      	ldrh	r6, [r3, #0]
 8004abe:	4853      	ldr	r0, [pc, #332]	; (8004c0c <_printf_i+0x23c>)
 8004ac0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ac2:	bf0c      	ite	eq
 8004ac4:	2308      	moveq	r3, #8
 8004ac6:	230a      	movne	r3, #10
 8004ac8:	2100      	movs	r1, #0
 8004aca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ace:	6865      	ldr	r5, [r4, #4]
 8004ad0:	60a5      	str	r5, [r4, #8]
 8004ad2:	2d00      	cmp	r5, #0
 8004ad4:	bfa2      	ittt	ge
 8004ad6:	6821      	ldrge	r1, [r4, #0]
 8004ad8:	f021 0104 	bicge.w	r1, r1, #4
 8004adc:	6021      	strge	r1, [r4, #0]
 8004ade:	b90e      	cbnz	r6, 8004ae4 <_printf_i+0x114>
 8004ae0:	2d00      	cmp	r5, #0
 8004ae2:	d04b      	beq.n	8004b7c <_printf_i+0x1ac>
 8004ae4:	4615      	mov	r5, r2
 8004ae6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004aea:	fb03 6711 	mls	r7, r3, r1, r6
 8004aee:	5dc7      	ldrb	r7, [r0, r7]
 8004af0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004af4:	4637      	mov	r7, r6
 8004af6:	42bb      	cmp	r3, r7
 8004af8:	460e      	mov	r6, r1
 8004afa:	d9f4      	bls.n	8004ae6 <_printf_i+0x116>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	d10b      	bne.n	8004b18 <_printf_i+0x148>
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	07de      	lsls	r6, r3, #31
 8004b04:	d508      	bpl.n	8004b18 <_printf_i+0x148>
 8004b06:	6923      	ldr	r3, [r4, #16]
 8004b08:	6861      	ldr	r1, [r4, #4]
 8004b0a:	4299      	cmp	r1, r3
 8004b0c:	bfde      	ittt	le
 8004b0e:	2330      	movle	r3, #48	; 0x30
 8004b10:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004b14:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004b18:	1b52      	subs	r2, r2, r5
 8004b1a:	6122      	str	r2, [r4, #16]
 8004b1c:	f8cd a000 	str.w	sl, [sp]
 8004b20:	464b      	mov	r3, r9
 8004b22:	aa03      	add	r2, sp, #12
 8004b24:	4621      	mov	r1, r4
 8004b26:	4640      	mov	r0, r8
 8004b28:	f7ff fee4 	bl	80048f4 <_printf_common>
 8004b2c:	3001      	adds	r0, #1
 8004b2e:	d14a      	bne.n	8004bc6 <_printf_i+0x1f6>
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b34:	b004      	add	sp, #16
 8004b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	f043 0320 	orr.w	r3, r3, #32
 8004b40:	6023      	str	r3, [r4, #0]
 8004b42:	4833      	ldr	r0, [pc, #204]	; (8004c10 <_printf_i+0x240>)
 8004b44:	2778      	movs	r7, #120	; 0x78
 8004b46:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b4a:	6823      	ldr	r3, [r4, #0]
 8004b4c:	6829      	ldr	r1, [r5, #0]
 8004b4e:	061f      	lsls	r7, r3, #24
 8004b50:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b54:	d402      	bmi.n	8004b5c <_printf_i+0x18c>
 8004b56:	065f      	lsls	r7, r3, #25
 8004b58:	bf48      	it	mi
 8004b5a:	b2b6      	uxthmi	r6, r6
 8004b5c:	07df      	lsls	r7, r3, #31
 8004b5e:	bf48      	it	mi
 8004b60:	f043 0320 	orrmi.w	r3, r3, #32
 8004b64:	6029      	str	r1, [r5, #0]
 8004b66:	bf48      	it	mi
 8004b68:	6023      	strmi	r3, [r4, #0]
 8004b6a:	b91e      	cbnz	r6, 8004b74 <_printf_i+0x1a4>
 8004b6c:	6823      	ldr	r3, [r4, #0]
 8004b6e:	f023 0320 	bic.w	r3, r3, #32
 8004b72:	6023      	str	r3, [r4, #0]
 8004b74:	2310      	movs	r3, #16
 8004b76:	e7a7      	b.n	8004ac8 <_printf_i+0xf8>
 8004b78:	4824      	ldr	r0, [pc, #144]	; (8004c0c <_printf_i+0x23c>)
 8004b7a:	e7e4      	b.n	8004b46 <_printf_i+0x176>
 8004b7c:	4615      	mov	r5, r2
 8004b7e:	e7bd      	b.n	8004afc <_printf_i+0x12c>
 8004b80:	682b      	ldr	r3, [r5, #0]
 8004b82:	6826      	ldr	r6, [r4, #0]
 8004b84:	6961      	ldr	r1, [r4, #20]
 8004b86:	1d18      	adds	r0, r3, #4
 8004b88:	6028      	str	r0, [r5, #0]
 8004b8a:	0635      	lsls	r5, r6, #24
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	d501      	bpl.n	8004b94 <_printf_i+0x1c4>
 8004b90:	6019      	str	r1, [r3, #0]
 8004b92:	e002      	b.n	8004b9a <_printf_i+0x1ca>
 8004b94:	0670      	lsls	r0, r6, #25
 8004b96:	d5fb      	bpl.n	8004b90 <_printf_i+0x1c0>
 8004b98:	8019      	strh	r1, [r3, #0]
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	6123      	str	r3, [r4, #16]
 8004b9e:	4615      	mov	r5, r2
 8004ba0:	e7bc      	b.n	8004b1c <_printf_i+0x14c>
 8004ba2:	682b      	ldr	r3, [r5, #0]
 8004ba4:	1d1a      	adds	r2, r3, #4
 8004ba6:	602a      	str	r2, [r5, #0]
 8004ba8:	681d      	ldr	r5, [r3, #0]
 8004baa:	6862      	ldr	r2, [r4, #4]
 8004bac:	2100      	movs	r1, #0
 8004bae:	4628      	mov	r0, r5
 8004bb0:	f7fb fb0e 	bl	80001d0 <memchr>
 8004bb4:	b108      	cbz	r0, 8004bba <_printf_i+0x1ea>
 8004bb6:	1b40      	subs	r0, r0, r5
 8004bb8:	6060      	str	r0, [r4, #4]
 8004bba:	6863      	ldr	r3, [r4, #4]
 8004bbc:	6123      	str	r3, [r4, #16]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc4:	e7aa      	b.n	8004b1c <_printf_i+0x14c>
 8004bc6:	6923      	ldr	r3, [r4, #16]
 8004bc8:	462a      	mov	r2, r5
 8004bca:	4649      	mov	r1, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	47d0      	blx	sl
 8004bd0:	3001      	adds	r0, #1
 8004bd2:	d0ad      	beq.n	8004b30 <_printf_i+0x160>
 8004bd4:	6823      	ldr	r3, [r4, #0]
 8004bd6:	079b      	lsls	r3, r3, #30
 8004bd8:	d413      	bmi.n	8004c02 <_printf_i+0x232>
 8004bda:	68e0      	ldr	r0, [r4, #12]
 8004bdc:	9b03      	ldr	r3, [sp, #12]
 8004bde:	4298      	cmp	r0, r3
 8004be0:	bfb8      	it	lt
 8004be2:	4618      	movlt	r0, r3
 8004be4:	e7a6      	b.n	8004b34 <_printf_i+0x164>
 8004be6:	2301      	movs	r3, #1
 8004be8:	4632      	mov	r2, r6
 8004bea:	4649      	mov	r1, r9
 8004bec:	4640      	mov	r0, r8
 8004bee:	47d0      	blx	sl
 8004bf0:	3001      	adds	r0, #1
 8004bf2:	d09d      	beq.n	8004b30 <_printf_i+0x160>
 8004bf4:	3501      	adds	r5, #1
 8004bf6:	68e3      	ldr	r3, [r4, #12]
 8004bf8:	9903      	ldr	r1, [sp, #12]
 8004bfa:	1a5b      	subs	r3, r3, r1
 8004bfc:	42ab      	cmp	r3, r5
 8004bfe:	dcf2      	bgt.n	8004be6 <_printf_i+0x216>
 8004c00:	e7eb      	b.n	8004bda <_printf_i+0x20a>
 8004c02:	2500      	movs	r5, #0
 8004c04:	f104 0619 	add.w	r6, r4, #25
 8004c08:	e7f5      	b.n	8004bf6 <_printf_i+0x226>
 8004c0a:	bf00      	nop
 8004c0c:	08004d49 	.word	0x08004d49
 8004c10:	08004d5a 	.word	0x08004d5a

08004c14 <memmove>:
 8004c14:	4288      	cmp	r0, r1
 8004c16:	b510      	push	{r4, lr}
 8004c18:	eb01 0402 	add.w	r4, r1, r2
 8004c1c:	d902      	bls.n	8004c24 <memmove+0x10>
 8004c1e:	4284      	cmp	r4, r0
 8004c20:	4623      	mov	r3, r4
 8004c22:	d807      	bhi.n	8004c34 <memmove+0x20>
 8004c24:	1e43      	subs	r3, r0, #1
 8004c26:	42a1      	cmp	r1, r4
 8004c28:	d008      	beq.n	8004c3c <memmove+0x28>
 8004c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c32:	e7f8      	b.n	8004c26 <memmove+0x12>
 8004c34:	4402      	add	r2, r0
 8004c36:	4601      	mov	r1, r0
 8004c38:	428a      	cmp	r2, r1
 8004c3a:	d100      	bne.n	8004c3e <memmove+0x2a>
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004c42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004c46:	e7f7      	b.n	8004c38 <memmove+0x24>

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4d06      	ldr	r5, [pc, #24]	; (8004c64 <_sbrk_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4604      	mov	r4, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	602b      	str	r3, [r5, #0]
 8004c54:	f7fc fda2 	bl	800179c <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	682b      	ldr	r3, [r5, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	6023      	str	r3, [r4, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200002c4 	.word	0x200002c4

08004c68 <memcpy>:
 8004c68:	440a      	add	r2, r1
 8004c6a:	4291      	cmp	r1, r2
 8004c6c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004c70:	d100      	bne.n	8004c74 <memcpy+0xc>
 8004c72:	4770      	bx	lr
 8004c74:	b510      	push	{r4, lr}
 8004c76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c7e:	4291      	cmp	r1, r2
 8004c80:	d1f9      	bne.n	8004c76 <memcpy+0xe>
 8004c82:	bd10      	pop	{r4, pc}

08004c84 <_realloc_r>:
 8004c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c88:	4680      	mov	r8, r0
 8004c8a:	4614      	mov	r4, r2
 8004c8c:	460e      	mov	r6, r1
 8004c8e:	b921      	cbnz	r1, 8004c9a <_realloc_r+0x16>
 8004c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c94:	4611      	mov	r1, r2
 8004c96:	f7ff bc49 	b.w	800452c <_malloc_r>
 8004c9a:	b92a      	cbnz	r2, 8004ca8 <_realloc_r+0x24>
 8004c9c:	f7ff fbda 	bl	8004454 <_free_r>
 8004ca0:	4625      	mov	r5, r4
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	f000 f81b 	bl	8004ce2 <_malloc_usable_size_r>
 8004cac:	4284      	cmp	r4, r0
 8004cae:	4607      	mov	r7, r0
 8004cb0:	d802      	bhi.n	8004cb8 <_realloc_r+0x34>
 8004cb2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004cb6:	d812      	bhi.n	8004cde <_realloc_r+0x5a>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	4640      	mov	r0, r8
 8004cbc:	f7ff fc36 	bl	800452c <_malloc_r>
 8004cc0:	4605      	mov	r5, r0
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d0ed      	beq.n	8004ca2 <_realloc_r+0x1e>
 8004cc6:	42bc      	cmp	r4, r7
 8004cc8:	4622      	mov	r2, r4
 8004cca:	4631      	mov	r1, r6
 8004ccc:	bf28      	it	cs
 8004cce:	463a      	movcs	r2, r7
 8004cd0:	f7ff ffca 	bl	8004c68 <memcpy>
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4640      	mov	r0, r8
 8004cd8:	f7ff fbbc 	bl	8004454 <_free_r>
 8004cdc:	e7e1      	b.n	8004ca2 <_realloc_r+0x1e>
 8004cde:	4635      	mov	r5, r6
 8004ce0:	e7df      	b.n	8004ca2 <_realloc_r+0x1e>

08004ce2 <_malloc_usable_size_r>:
 8004ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ce6:	1f18      	subs	r0, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bfbc      	itt	lt
 8004cec:	580b      	ldrlt	r3, [r1, r0]
 8004cee:	18c0      	addlt	r0, r0, r3
 8004cf0:	4770      	bx	lr
	...

08004cf4 <_init>:
 8004cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cf6:	bf00      	nop
 8004cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cfa:	bc08      	pop	{r3}
 8004cfc:	469e      	mov	lr, r3
 8004cfe:	4770      	bx	lr

08004d00 <_fini>:
 8004d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d02:	bf00      	nop
 8004d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d06:	bc08      	pop	{r3}
 8004d08:	469e      	mov	lr, r3
 8004d0a:	4770      	bx	lr
